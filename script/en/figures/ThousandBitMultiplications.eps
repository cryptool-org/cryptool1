%!PS-Adobe-3.0 EPSF-3.0

%%Title: (No Slide Title)

%%Version: 1 4

%%Creator: (Acrobat PDFMaker 5.0 f\374r PowerPoint)

%%CreationDate: (D:20020624142258Z)

%%For: (M90100)

%%DocumentData: Clean7Bit

%%BoundingBox: 280 214 694 430

%%Pages: 0

%%DocumentProcessColors: Cyan Magenta Yellow Black

%%DocumentSuppliedResources:

%%+ procset (Adobe Acrobat - PDF operators) 1.2 0

%%+ procset (Adobe Acrobat - type operators) 1.2 0

%%EndComments

280 214 moveto 694 214 lineto 694 430 lineto 280 430 lineto closepath clip newpath

%%BeginProlog

%%EndProlog

%%BeginSetup

/currentpacking where{pop currentpacking true setpacking}if

%%BeginResource: procset pdfvars

%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.

%%Version: 5.0 6

%%Title: definition of dictionary of variables used by PDF & PDFText procsets

userdict /PDF 160 dict put

userdict /PDFVars 89 dict dup begin put

/docSetupDone false def

/InitAll 0 def

/TermAll 0 def

/DocInitAll 0 def

/DocTermAll 0 def

/_pdfEncodings 2 array def

/_pdf_str1 1 string def

/_pdf_i 0 def

/_pdf_na 0 def

/_pdf_showproc 0 def

/_italMtx [1 0 .212557 1 0 0] def

/_italMtx_WMode1 [1 -.212557 0 1 0 0] def

/_italMtxType0 [1 0 .1062785 1 0 0] def

/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def

/_basefont 0 def

/_basefonto 0 def

/_pdf_oldCIDInit null def

/_pdf_FontDirectory 30 dict def

/_categories 10 dict def

/_sa? true def

/_ColorSep5044? false def

/nulldict 0 dict def

/_processColors 0 def

/overprintstack null def

/_defaulttransfer currenttransfer def

/_defaultflatness currentflat def

/_defaulthalftone null def

/_defaultcolortransfer null def

/_defaultblackgeneration null def

/_defaultundercolorremoval null def

/_defaultcolortransfer null def

PDF begin

[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W

/applyInterpFunc/applystitchFunc/domainClip/encodeInput

/initgs/int/limit/rangeClip

/defineRes/findRes/setSA/pl

%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver

/? /! /| /: /+ /GetGlyphDirectory

/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage

/pdf_shfill /pdf_sethalftone

] {null def} bind forall

end

end

%%EndResource

PDFVars begin PDF begin

%%BeginResource: procset pdfutil

%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.

%%Version: 4.0 2

%%Title: Basic utilities used by other PDF procsets

/bd {bind def} bind def

/ld {load def} bd

/bld {

dup length dict begin

{ null def } forall

bind

end

def

} bd

/dd { PDFVars 3 1 roll put } bd

/xdd { exch dd } bd

/Level2?

systemdict /languagelevel known

{ systemdict /languagelevel get 2 ge } { false } ifelse

def

/Level1? Level2? not def

/Level3?

systemdict /languagelevel known

{systemdict /languagelevel get 3 eq } { false } ifelse

def

/getifknown {

2 copy known { get true } { pop pop false } ifelse

} bd

/here {

currentdict exch getifknown

} bd

/isdefined? { where { pop true } { false } ifelse } bd

%%EndResource

%%BeginResource: l2compat

%%Version: 5.0 9

%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.

%%LanguageLevel: 1

%%Title: Level 1 emulation of level 2 operators

/setcmykcolor isdefined? not

{

/setcmykcolor {

1 sub 4 1 roll

3 {

3 index add neg dup 0 lt { pop 0 } if

3 1 roll

} repeat

setrgbcolor

pop

} bd

} if

/rectclip isdefined? not

{

/rectclip { newpath re clip newpath } bd

} if

/rectfill isdefined? not

{

/rectfill { gsave newpath re fill grestore } bd

} if

/sethalftone isdefined? not

{

/sethalftone {

begin

HalftoneType 1 eq

{ Frequency Angle /SpotFunction load setscreen }

if

end

} bd

} if

Level1?

{

/pdf_show {show} bd

/xshow

{

PDFVars /_pdf_showproc /pdf_show load put

pdf_xshow

} bd

/yshow

{

PDFVars /_pdf_showproc /pdf_show load put

pdf_yshow

} bd

/xyshow

{

PDFVars /_pdf_showproc /pdf_show load put

pdf_xyshow

} bd

} if

%%EndResource

%%BeginResource: procset pdf

%%Version: 5.0 6

%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.

%%Title: General operators for PDF, common to all Language Levels.

/cm { matrix astore concat } bd

/d /setdash ld

/f /fill ld

/h /closepath ld

/i {dup 0 eq {pop _defaultflatness} if setflat} bd

/j /setlinejoin ld

/J /setlinecap ld

/M /setmiterlimit ld

/n /newpath ld

/S /stroke ld

/w /setlinewidth ld

/W /clip ld

/initgs {

0 setgray

[] 0 d

0 j

0 J

10 M

1 w

false setSA

/_defaulttransfer load settransfer

0 i

/RelativeColorimetric ri

newpath

} bd

/int {

dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul

exch pop add exch pop

} bd

/limit {

dup 2 index le { exch } if pop

dup 2 index ge { exch } if pop

} bd

/domainClip {

Domain aload pop 3 2 roll

limit

} [/Domain] bld

/applyInterpFunc {

0 1 DimOut 1 sub

{

dup C0 exch get exch

dup C1 exch get exch

3 1 roll

1 index sub

3 index

N exp mul add

exch

currentdict /Range_lo known

{

dup Range_lo exch get exch

Range_hi exch get

3 2 roll limit

}

{

pop

}

ifelse

exch

} for

pop

} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld

/encodeInput {

NumParts 1 sub

0 1 2 index

{

dup Bounds exch get

2 index gt

{ exit }

{ dup

3 index eq

{ exit }

{ pop } ifelse

} ifelse

} for

3 2 roll pop

dup Bounds exch get exch

dup 1 add Bounds exch get exch

2 mul

dup Encode exch get exch

1 add Encode exch get

int

} [/NumParts /Bounds /Encode] bld

/rangeClip {

exch dup Range_lo exch get

exch Range_hi exch get

3 2 roll

limit

} [/Range_lo /Range_hi] bld

/applyStitchFunc {

Functions exch get exec

currentdict /Range_lo known {

0 1 DimOut 1 sub {

DimOut 1 add -1 roll

rangeClip

} for

} if

} [/Functions /Range_lo /DimOut] bld

/pdf_flushfilters

{

aload length

{ dup status

1 index currentfile ne and

{ dup flushfile closefile }

{ pop }

ifelse

} repeat

} bd

/pdf_readstring

{

1 index dup length 1 sub get

exch readstring pop

exch pdf_flushfilters

} bind def

/pdf_dictOp

{

3 2 roll

10 dict copy

begin

_Filters dup length 1 sub get def

currentdict exch exec

_Filters pdf_flushfilters

end

} [/_Filters] bld

/pdf_image {{image} /DataSource pdf_dictOp} bd

/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd

/pdf_shfill {{sh} /DataSource pdf_dictOp} bd

/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd

/pdf_maskedImage

{

10 dict copy begin

/miDict currentdict def

/DataDict DataDict 10 dict copy def

DataDict begin

/DataSource

_Filters dup length 1 sub get

def

miDict image

_Filters pdf_flushfilters

end

end

} [/miDict /DataDict /_Filters] bld

%%EndResource

%%BeginResource: procset sep_ops

%%Version: 4.0 1

%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.

%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044

userdict /sep_ops 50 dict dup begin put

/bdef {bind def} bind def

/xdef {exch def} bdef

/colorimagebuffer {

0 1 2 index length 1 sub {

dup 2 index exch get 255 exch sub 2 index 3 1 roll put

} for

} bdef

/addprocs {

[ 3 1 roll

/exec load

dup 3 1 roll

] cvx

} bdef

/L1? {

systemdict /languagelevel known {

systemdict /languagelevel get 2 lt

}{

true

} ifelse

} bdef

/colorexists {

statusdict /processcolors known {

statusdict /processcolors get exec

}{

/deviceinfo where {

pop deviceinfo /Colors known {

deviceinfo /Colors get

statusdict /processcolors {

deviceinfo /Colors known {

deviceinfo /Colors get

}{

1

} ifelse

} put

}{

1

} ifelse

}{

1

} ifelse

} ifelse

1 gt

} bdef

/colorplate colorexists { 0 } { 5 } ifelse def

/negativecolorplate false def

/setcmykcolor where {

pop

gsave

1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub

0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub

0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub

0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub

4 {4 copy} repeat

grestore

1 dict begin

/foureq {

4 index eq 8 1 roll

4 index eq 8 1 roll

4 index eq 8 1 roll

4 index eq 8 1 roll

pop pop pop pop and and and

} def

1 0 0 0 foureq {/colorplate 1 store} if

0 1 0 0 foureq {/colorplate 2 store} if

0 0 1 0 foureq {/colorplate 3 store} if

0 0 0 1 foureq {/colorplate 4 store} if

0 0 0 0 foureq {/colorplate 6 store} if

end

} if

0 systemdict /currenttransfer get exec exec

1 systemdict /currenttransfer get exec exec

2 copy

eq

{

/colorplate 6 store

pop

/negativecolorplate exch 0.5 lt store

}

{

gt /negativecolorplate exch store

}

ifelse

/findcmykcustomcolor where { pop }

{

/findcmykcustomcolor {

[ 6 1 roll ] readonly

} bdef

} ifelse

/setoverprint where {

pop

}{

/setoverprint {

pop

} bdef

} ifelse

/currentoverprint where {

pop

}{

/currentoverprint {

false

} bdef

} ifelse

/setcustomcolor where {

pop

}{

L1? {

/setcustomcolor {

exch

aload pop pop

4 { 4 index mul 4 1 roll } repeat

5 -1 roll pop

setcmykcolor

} bdef

}{

/setcustomcolor {

exch

[ exch /Separation exch dup 4 get exch /DeviceCMYK exch

0 4 getinterval

[ exch /dup load exch cvx {mul exch dup}

/forall load /pop load dup] cvx

] setcolorspace setcolor

} bdef

} ifelse

} ifelse

/ik 0 def

/iy 0 def

/im 0 def

/ic 0 def

/imagetint {

ic .3 mul

im .59 mul

iy .11 mul

ik add add add dup

1 gt {pop 1} if

} bdef

/setcmykcolor where {

pop

}{

/setcmykcolor {

/ik xdef /iy xdef /im xdef /ic xdef

imagetint

1 exch sub setgray

} bdef

} ifelse

/customcolorimage where {

pop

}{

L1? {

/customcolorimage{

gsave

colorexists {

aload pop pop

/ik xdef /iy xdef /im xdef /ic xdef

currentcolortransfer

{ik mul ik sub 1 add} addprocs

4 1 roll {iy mul iy sub 1 add} addprocs

4 1 roll {im mul im sub 1 add} addprocs

4 1 roll {ic mul ic sub 1 add} addprocs

4 1 roll setcolortransfer

/magentabuf 0 string def

/yellowbuf 0 string def

/blackbuf 0 string def

{

colorimagebuffer dup length magentabuf length ne

{

dup length dup dup

/magentabuf exch string def

/yellowbuf exch string def

/blackbuf exch string def

} if

dup magentabuf copy yellowbuf copy

blackbuf copy pop

} addprocs

{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage

}{

aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint

imagetint def

currenttransfer

{tint mul 1 tint sub add} addprocs settransfer image

} ifelse

grestore

} bdef

}{

/customcolorimage {

gsave

[ exch /Separation exch dup 4 get exch /DeviceCMYK exch

0 4 getinterval

[ exch /dup load exch cvx {mul exch dup}

/forall load /pop load dup] cvx

] setcolorspace

10 dict begin

/ImageType 1 def

/DataSource exch def

/ImageMatrix exch def

/BitsPerComponent exch def

/Height exch def

/Width exch def

/Decode [1 0] def

currentdict end

image

grestore

} bdef

} ifelse

} ifelse

/setseparationgray where {

pop

}{

L1? {

/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef

}{

/setseparationgray {

[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace

1 exch sub setcolor

} bdef

} ifelse

} ifelse

/separationimage where { pop }

{

/separationimage {

gsave

1 1 1 1 (All)

findcmykcustomcolor customcolorimage

grestore

} bdef

} ifelse

currentdict readonly pop end

%%EndResource

%%BeginResource: procset pdflev15044

%%Version: 5.0 12

%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.

%%LanguageLevel: 1

%%Title: PDF operators, Level 1, with emulated separations (TN 5044)

/_ColorSep5044? true dd

/docinitialize {

PDF begin

/_defaulthalftone

/currenthalftone where

{ pop currenthalftone }

{ 4 dict dup begin

currentscreen

/SpotFunction exch def

/Angle exch def

/Frequency exch def

/HalftoneType 1 def

end }

ifelse

dd

/currentcolortransfer where

{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }

{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }

ifelse

end

} bd

/initialize {

/overprintstack null dd

sep_ops begin

50 dict begin

_defaulthalftone sethalftone

} bd

/terminate {

end end

} bd

/currentcolortransfer where

{ pop }

{

/setcolortransfer

{

settransfer pop pop pop

} bd

} ifelse

/pl {

transform

0.25 sub round 0.25 add exch

0.25 sub round 0.25 add exch

itransform

} bd

/m { _sa? { pl } if moveto } bd

/l { _sa? { pl } if lineto } bd

/c

{

_sa? {3 {pl 6 2 roll} repeat} if

curveto

} bd

/ri/pop ld

/setSA { /_sa? xdd } bd

/re

{

_sa?

{

8 dict begin

/:h exch def

/:w exch def

/:y exch def

/:x exch def

:x :y pl

/:ymin exch def /:xmin exch def

:x :w add :y :h add pl

/:ymax exch def /:xmax exch def

:xmin :ymin moveto

:xmax :ymin lineto

:xmax :ymax lineto

:xmin :ymax lineto

closepath

end

}

{

4 2 roll moveto

1 index 0 rlineto

0 exch rlineto

neg 0 rlineto

closepath

} ifelse

} bd

/q

{

gsave

[currentoverprint overprintstack] /overprintstack xdd

}

[/overprintstack] bld

/Q

{

overprintstack aload pop /overprintstack xdd setoverprint

grestore

}

[/overprintstack] bld

/AlmostFull?

{ dup maxlength exch length sub 2 le

} bd

/Expand

{ 1 index maxlength mul cvi dict

dup begin exch { def } forall end

} bd

/xput

{ 3 2 roll

dup 3 index known not

{ dup AlmostFull? { 1.5 Expand } if

} if

dup 4 2 roll put

} bd

/defineRes

{ _categories 1 index known not

{ /_categories _categories 2 index 10 dict xput store

} if

_categories exch 2 copy get 5 -1 roll 4 index xput put

} bd

/findRes {

_categories exch get exch get

} bd

/L1setcolor {

aload length

dup 0 eq

{ pop .5 setgray }

{ dup 1 eq

{ pop setgray }

{ 3 eq

{ setrgbcolor }

{ setcmykcolor }

ifelse }

ifelse }

ifelse

} bind dd

/concattransferfuncs {

[ 3 1 roll /exec load exch /exec load ] cvx

} bd

/concatandsettransfer {

/_defaulttransfer load concattransferfuncs settransfer

} bd

/concatandsetcolortransfer {

colorplate 0 eq

{

_defaultcolortransfer aload pop

8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll

6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll

4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll

concattransferfuncs

setcolortransfer

} if

colorplate 1 ge colorplate 4 le and

{

4 colorplate sub index 4 { exch pop } repeat

concatandsettransfer

} if

colorplate 5 ge

{

0 index 4 { exch pop } repeat

concatandsettransfer

} if

} bd

/tn5044sethalftone

{

begin

HalftoneType 5 eq

{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]

colorplate get

here not {

/Default here not { currentdict } if

} if

}

{ currentdict }

ifelse

end

begin

/TransferFunction here

{

concatandsettransfer

currentdict dup length dict

begin

{

1 index /TransferFunction ne { def } { pop pop } ifelse

} forall

currentdict

end

}

{

currentdict

} ifelse

end

sethalftone

} bd

/paintimage

{

colorplate 0 eq

{

{ {currentfile cyanstr readstring pop}

{currentfile magentastr readstring pop}

{currentfile yellowstr readstring pop}

{currentfile blackstr readstring pop

currentfile graystr readstring pop pop}

}

{ {currentfile cyanstr readhexstring pop}

{currentfile magentastr readhexstring pop}

{currentfile yellowstr readhexstring pop}

{currentfile blackstr readhexstring pop

currentfile graystr readhexstring pop pop}

} ifelse

true 4 colorimage

}

{

3 dict begin

/binaryOK exch def

[

1 1 5 {

dup

/currentfile cvx

[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]

3 -1 roll 1 sub get cvx

binaryOK { /readstring } { /readhexstring } ifelse cvx

/pop cvx

5 -1 roll

colorplate dup 5 gt { pop 5 } if

eq not { /pop cvx } if

} for

] cvx bind

end

[

colorplate 6 eq {

/pop cvx

negativecolorplate { 0 } { 1 } ifelse

} if

colorplate 4 le

{

1 /exch cvx /sub cvx

} if

colorplate 6 ne

{

systemdict /currenttransfer get exec

aload pop

} if

] cvx

gsave

systemdict /settransfer get exec

systemdict /image get exec

grestore

} ifelse

} bd

/getrampcolor {

/indx exch def

[

0 1 NumComp 1 sub {

dup

Samples exch get

dup type /stringtype eq { indx get } if

exch

Scaling exch get aload pop

3 1 roll

mul add

} for

]

L1setcolor

} bd

/GenStrips {

40 dict begin

/background exch def

/ext1 exch def

/ext0 exch def

/BBox exch def

/y2 exch def

/x2 exch def

/y1 exch def

/x1 exch def

/rampdict exch def

gsave

BBox length 0 gt {

BBox 0 get BBox 1 get

BBox 2 get BBox 0 get sub

BBox 3 get BBox 1 get sub

rectclip

} if

x1 x2 eq

{

y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse

}

{

/slope y2 y1 sub x2 x1 sub div def

/theta slope 1 atan def

x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if

x2 x1 lt y2 y1 le and { /theta theta 180 add def} if

}

ifelse

gsave

clippath

x1 y1 translate

theta rotate

{ pathbbox } stopped

{ 0 0 0 0 } if

/yMax exch def

/xMax exch def

/yMin exch def

/xMin exch def

grestore

xMax xMin eq yMax yMin eq or

{

grestore

end

}

{

rampdict begin

20 dict begin

background length 0 gt { background L1setcolor gsave clippath fill grestore } if

gsave

x1 y1 translate

theta rotate

/xStart 0 def

/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def

/ySpan yMax yMin sub def

/numsteps NumSamples def

/rampIndxInc 1 def

/subsampling false def

xStart 0 transform

xEnd 0 transform

3 -1 roll

sub dup mul

3 1 roll

sub dup mul

add 0.5 exp 72 div

0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt

72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt

1 index 1 index lt { exch } if pop

mul

/numpix exch def

numpix 0 ne

{

NumSamples numpix div 0.5 gt

{

/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def

/rampIndxInc NumSamples 1 sub numsteps div def

/subsampling true def

} if

} if

ext0 {

0 getrampcolor

xMin xStart lt

{ xMin yMin xMin neg ySpan rectfill } if

} if

/xInc xEnd xStart sub numsteps div def

/x xStart def

0

numsteps

{

dup

subsampling { round cvi } if

getrampcolor

x yMin xInc ySpan rectfill

/x x xInc add def

rampIndxInc add

}

repeat

pop

ext1 {

xMax xEnd gt

{ xEnd yMin xMax xEnd sub ySpan rectfill } if

} if

grestore

grestore

end

end

end

} ifelse

} bd

/RadialShade {

40 dict begin

/background exch def

/ext1 exch def

/ext0 exch def

/BBox exch def

/r2 exch def

/c2y exch def

/c2x exch def

/r1 exch def

/c1y exch def

/c1x exch def

/rampdict exch def

gsave

BBox length 0 gt {

BBox 0 get BBox 1 get

BBox 2 get BBox 0 get sub

BBox 3 get BBox 1 get sub

rectclip

} if

gsave

clippath

pathbbox

/BByMax exch def

/BBxMax exch def

/BByMin exch def

/BBxMin exch def

grestore

BBxMax BBxMin eq BByMax BByMin eq or

{

grestore

end

}

{

rampdict begin

20 dict begin

background length 0 gt { background L1setcolor gsave clippath fill grestore } if

/areaOfConcern

BBxMin BByMin BBxMax BByMax

BBxMin BByMin

BBxMax BBxMin sub 0

0 BByMax BByMin sub

BBxMin BBxMax sub 0

12 packedarray

< 0B 00 01 04 04 04 0A>

2 packedarray

def

c1x c2x sub dup mul

c1y c2y sub dup mul

add 0.5 exp

r1 add

r2 sub

abs

0 dtransform

dup mul exch dup mul add 0.5 exp 72 div

0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt

72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt

1 index 1 index lt { exch } if pop

/hires exch def

hires mul

/numpix exch def

/numsteps NumSamples def

/rampIndxInc 1 def

/subsampling false def

numpix 0 ne

{

NumSamples numpix div 0.5 gt

{

/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def

/rampIndxInc NumSamples 1 sub numsteps div def

/subsampling true def

} if

} if

/xInc c2x c1x sub numsteps div def

/yInc c2y c1y sub numsteps div def

/rInc r2 r1 sub numsteps div def

/cx c1x def

/cy c1y def

/radius r1 def

newpath

xInc 0 eq yInc 0 eq rInc 0 eq and and

{

0 getrampcolor

cx cy radius 0 360 arc

stroke

NumSamples 1 sub getrampcolor

cx cy radius 72 hires div add 0 360 arc

0 setlinewidth

stroke

}

{

0

numsteps

{

dup

subsampling { round cvi } if

getrampcolor

cx cy radius 0 360 arc

/cx cx xInc add def

/cy cy yInc add def

/radius radius rInc add def

cx cy radius 360 0 arcn

eofill

rampIndxInc add

}

repeat

pop

} ifelse

grestore

end

end

end

} ifelse

} bd

%%EndResource

%%BeginResource: procset pdftext

%%Version: 5.0 5

%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.

%%Title: Text operators for PDF

PDF /PDFText 78 dict dup begin put

/docinitialize

{

/resourcestatus where {

pop

/CIDParams /ProcSet resourcestatus {

pop pop

false /CIDParams /ProcSet findresource /SetBuildCompatible get exec

} if

} if

PDF begin

PDFText /_pdfDefineIdentity-H known

{ PDFText /_pdfDefineIdentity-H get exec}

if

end

} bd

/initialize {

PDFText begin

} bd

/terminate { end } bd

Level2?

{

/_safeput

{

3 -1 roll load 3 1 roll put

}

bd

}

{

/_safeput

{

2 index load dup dup length exch maxlength ge

{ dup length 5 add dict copy

3 index xdd

}

{ pop }

ifelse

3 -1 roll load 3 1 roll put

}

bd

}

ifelse

/pdf_has_composefont? systemdict /composefont known def

/CopyFont {

{

1 index /FID ne 2 index /UniqueID ne and

{ def } { pop pop } ifelse

} forall

} bd

/Type0CopyFont

{

exch

dup length dict

begin

CopyFont

[

exch

FDepVector

{

dup /FontType get 0 eq

{

1 index Type0CopyFont

/_pdfType0 exch definefont

}

{

/_pdfBaseFont exch

2 index exec

}

ifelse

exch

}

forall

pop

]

/FDepVector exch def

currentdict

end

} bd

Level2? {currentglobal true setglobal} if

/cHexEncoding

[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12

/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25

/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38

/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B

/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E

/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71

/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84

/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97

/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA

/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD

/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0

/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3

/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6

/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def

Level2? {setglobal} if

/modEnc {

/_enc xdd

/_icode 0 dd

counttomark 1 sub -1 0

{

index

dup type /nametype eq

{

_enc _icode 3 -1 roll put

_icode 1 add

}

if

/_icode xdd

} for

cleartomark

_enc

} bd

/trEnc {

/_enc xdd

255 -1 0 {

exch dup -1 eq

{ pop /.notdef }

{ Encoding exch get }

ifelse

_enc 3 1 roll put

} for

pop

_enc

} bd

/TE {

/_i xdd

StandardEncoding 256 array copy modEnc

_pdfEncodings exch _i exch put

} bd

/TZ

{

/_usePDFEncoding xdd

findfont

dup length 6 add dict

begin

{

1 index /FID ne { def } { pop pop } ifelse

} forall

/pdf_origFontName FontName def

/FontName exch def

currentdict /PaintType known

{ PaintType 2 eq {/PaintType 0 def} if }

if

_usePDFEncoding 0 ge

{

/Encoding _pdfEncodings _usePDFEncoding get def

pop

}

{

_usePDFEncoding -1 eq

{

counttomark 0 eq

{ pop }

{

Encoding 256 array copy

modEnc /Encoding exch def

}

ifelse

}

{

256 array

trEnc /Encoding exch def

}

ifelse

}

ifelse

pdf_EuroProcSet pdf_origFontName known

{

pdf_origFontName pdf_AddEuroGlyphProc

} if

Level2?

{

currentdict /pdf_origFontName undef

} if

FontName currentdict

end

definefont pop

}

bd

Level2?

{

/TZG

{

currentglobal true setglobal

2 index _pdfFontStatus

{

2 index findfont

false setglobal

3 index findfont

true setglobal

ne

{

2 index findfont dup rcheck

{

dup length dict begin

{

1 index /FID ne { def } { pop pop } ifelse

} forall

currentdict end

}

if

3 index exch definefont pop

}

if

} if

setglobal

TZ

} bd

}

{

/TZG {TZ} bd

} ifelse

Level2?

{

currentglobal false setglobal

userdict /pdftext_data 5 dict put

pdftext_data

begin

/saveStacks

{

pdftext_data

begin

/vmmode currentglobal def

false setglobal

count array astore /os exch def

end

countdictstack array dictstack pdftext_data exch /ds exch put

cleardictstack pdftext_data /dscount countdictstack put

pdftext_data /vmmode get setglobal

} bind def

/restoreStacks

{

pdftext_data /vmmode currentglobal put false setglobal

clear cleardictstack

pdftext_data /ds get dup

pdftext_data /dscount get 1 2 index length 1 sub

{ get begin dup } for

pop pop

pdftext_data /os get aload pop

pdftext_data /vmmode get setglobal

} bind def

/testForClonePrinterBug

{

currentglobal true setglobal

/undefinedCategory /Generic /Category findresource

dup length dict copy /Category defineresource pop

setglobal

pdftext_data /saveStacks get exec

pdftext_data /vmmode currentglobal put false setglobal

/undefined /undefinedCategory { resourcestatus } stopped

pdftext_data exch /bugFound exch put

pdftext_data /vmmode get setglobal

pdftext_data /restoreStacks get exec

pdftext_data /bugFound get

} bind def

end

setglobal

/pdf_resourcestatus

pdftext_data /testForClonePrinterBug get exec

{

{

pdftext_data /saveStacks get exec

pdftext_data /os get dup dup length 1 sub

dup 1 sub dup 0 lt { pop 0 } if

exch 1 exch { get exch dup } for

pop pop

{ resourcestatus }

stopped

{

clear cleardictstack pdftext_data /restoreStacks get exec

{ pop pop } stopped pop false

}

{

count array astore pdftext_data exch /results exch put

pdftext_data /restoreStacks get exec pop pop

pdftext_data /results get aload pop

}

ifelse

}

}

{ { resourcestatus } }

ifelse

bd

}

if

Level2?

{

/_pdfUndefineResource

{

currentglobal 3 1 roll

_pdf_FontDirectory 2 index 2 copy known

{undef}

{pop pop}

ifelse

1 index (pdf) exch _pdfConcatNames 1 index

1 index 1 _pdfConcatNames 1 index

5 index 1 _pdfConcatNames 1 index

4

{

2 copy pdf_resourcestatus

{

pop 2 lt

{2 copy findresource gcheck setglobal undefineresource}

{pop pop}

ifelse

}

{ pop pop}

ifelse

} repeat

setglobal

} bd

}

{

/_pdfUndefineResource { pop pop} bd

}

ifelse

Level2?

{

/_pdfFontStatus

{

currentglobal exch

/Font pdf_resourcestatus

{pop pop true}

{false}

ifelse

exch setglobal

} bd

}

{

/_pdfFontStatusString 50 string def

_pdfFontStatusString 0 (fonts/) putinterval

/_pdfFontStatus

{

FontDirectory 1 index known

{ pop true }

{

_pdfFontStatusString 6 42 getinterval

cvs length 6 add

_pdfFontStatusString exch 0 exch getinterval

{ status } stopped

{pop false}

{

{ pop pop pop pop true}

{ false }

ifelse

}

ifelse

}

ifelse

} bd

}

ifelse

Level2?

{

/_pdfCIDFontStatus

{

/CIDFont /Category pdf_resourcestatus

{

pop pop

/CIDFont pdf_resourcestatus

{pop pop true}

{false}

ifelse

}

{ pop false }

ifelse

} bd

}

if

/_pdfString100 100 string def

/_pdfComposeFontName

{

dup length 1 eq

{

0 get

1 index

type /nametype eq

{

_pdfString100 cvs

length dup dup _pdfString100 exch (-) putinterval

_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval

2 index exch cvs length

add 1 add _pdfString100 exch 0 exch getinterval

exch pop

true

}

{

pop pop

false

}

ifelse

}

{

false

}

ifelse

dup {exch cvn exch} if

} bd

/_pdfConcatNames

{

exch

_pdfString100 cvs

length dup dup _pdfString100 exch (-) putinterval

_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval

3 -1 roll exch cvs length

add 1 add _pdfString100 exch 0 exch getinterval

cvn

} bind def

/_pdfTextTempString 50 string def

/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def

/_pdf_CheckCIDSystemInfo

{

1 index _pdfTextTempString cvs

(Identity) anchorsearch

{

pop pop pop pop true

}

{

false

_pdfRegOrderingArray

{

2 index exch

anchorsearch

{ pop pop pop true exit}

{ pop }

ifelse

}

forall

exch pop

exch /CIDFont findresource

/CIDSystemInfo get

3 -1 roll /CMap findresource

/CIDSystemInfo get

exch

3 -1 roll

{

2 copy

/Supplement get

exch

dup type /dicttype eq

{/Supplement get}

{pop 0 }

ifelse

ge

}

{ true }

ifelse

{

dup /Registry get

2 index /Registry get eq

{

/Ordering get

exch /Ordering get

dup type /arraytype eq

{

1 index type /arraytype eq

{

true

1 index length 1 sub -1 0

{

dup 2 index exch get exch 3 index exch get ne

{ pop false exit}

if

} for

exch pop exch pop

}

{ pop pop false }

ifelse

}

{

eq

}

ifelse

}

{ pop pop false }

ifelse

}

{ pop pop false }

ifelse

}

ifelse

} bind def

pdf_has_composefont?

{

/_pdfComposeFont

{

2 copy _pdfComposeFontName not

{

2 index

}

if

(pdf) exch _pdfConcatNames

dup _pdfFontStatus

{ dup findfont 5 2 roll pop pop pop true}

{

4 1 roll

1 index /CMap pdf_resourcestatus

{

pop pop

true

}

{false}

ifelse

1 index true exch

{

_pdfCIDFontStatus not

{pop false exit}

if

}

forall

and

{

1 index 1 index 0 get _pdf_CheckCIDSystemInfo

{

3 -1 roll pop

2 index 3 1 roll

composefont true

}

{

pop pop exch pop false

}

ifelse

}

{

_pdfComposeFontName

{

dup _pdfFontStatus

{

exch pop

1 index exch

findfont definefont true

}

{

pop exch pop

false

}

ifelse

}

{

exch pop

false

}

ifelse

}

ifelse

{ true }

{

dup _pdfFontStatus

{ dup findfont true }

{ pop false }

ifelse

}

ifelse

}

ifelse

} bd

}

{

/_pdfComposeFont

{

_pdfComposeFontName not

{

dup

}

if

dup

_pdfFontStatus

{exch pop dup findfont true}

{

1 index

dup type /nametype eq

{pop}

{cvn}

ifelse

eq

{pop false}

{

dup _pdfFontStatus

{dup findfont true}

{pop false}

ifelse

}

ifelse

}

ifelse

} bd

}

ifelse

/_pdfStyleDicts 4 dict dup begin

/Adobe-Japan1 4 dict dup begin

Level2?

{

/Serif

/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus

{/HeiseiMin-W3}

{

/HeiseiMin-W3 _pdfCIDFontStatus

{/HeiseiMin-W3}

{/Ryumin-Light}

ifelse

}

ifelse

def

/SansSerif

/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus

{/HeiseiKakuGo-W5}

{

/HeiseiKakuGo-W5 _pdfCIDFontStatus

{/HeiseiKakuGo-W5}

{/GothicBBB-Medium}

ifelse

}

ifelse

def

/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus

{/HeiseiMaruGo-W4}

{

/HeiseiMaruGo-W4 _pdfCIDFontStatus

{/HeiseiMaruGo-W4}

{

/Jun101-Light-RKSJ-H _pdfFontStatus

{ /Jun101-Light }

{ SansSerif }

ifelse

}

ifelse

}

ifelse

/RoundSansSerif exch def

/Default Serif def

}

{

/Serif /Ryumin-Light def

/SansSerif /GothicBBB-Medium def

{

(fonts/Jun101-Light-83pv-RKSJ-H) status

}stopped

{pop}{

{ pop pop pop pop /Jun101-Light }

{ SansSerif }

ifelse

/RoundSansSerif exch def

}ifelse

/Default Serif def

}

ifelse

end

def

/Adobe-Korea1 4 dict dup begin

/Serif /HYSMyeongJo-Medium def

/SansSerif /HYGoThic-Medium def

/RoundSansSerif SansSerif def

/Default Serif def

end

def

/Adobe-GB1 4 dict dup begin

/Serif /STSong-Light def

/SansSerif /STHeiti-Regular def

/RoundSansSerif SansSerif def

/Default Serif def

end

def

/Adobe-CNS1 4 dict dup begin

/Serif /MKai-Medium def

/SansSerif /MHei-Medium def

/RoundSansSerif SansSerif def

/Default Serif def

end

def

end

def

/TZzero

{

/_wmode xdd

/_styleArr xdd

/_regOrdering xdd

3 copy

_pdfComposeFont

{

5 2 roll pop pop pop

}

{

[

0 1 _styleArr length 1 sub

{

_styleArr exch get

_pdfStyleDicts _regOrdering 2 copy known

{

get

exch 2 copy known not

{ pop /Default }

if

get

}

{

pop pop pop /Unknown

}

ifelse

}

for

]

exch pop

2 index 3 1 roll

_pdfComposeFont

{3 -1 roll pop}

{

findfont dup /FontName get exch

}

ifelse

}

ifelse

dup /WMode 2 copy known

{ get _wmode ne }

{ pop pop _wmode 1 eq}

ifelse

{

exch _wmode _pdfConcatNames

dup _pdfFontStatus

{ exch pop dup findfont false}

{ exch true }

ifelse

}

{

dup /FontType get 0 ne

}

ifelse

{

dup /FontType get 3 eq _wmode 1 eq and

{

_pdfVerticalRomanT3Font dup length 10 add dict copy

begin

/_basefont exch

dup length 3 add dict

begin

{1 index /FID ne {def}{pop pop} ifelse }

forall

/Encoding Encoding dup length array copy

dup 16#27 /quotesingle put

dup 16#60 /grave put

_regOrdering /Adobe-Japan1 eq

{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}

if

def

FontName

currentdict

end

definefont

def

/Encoding _basefont /Encoding get def

/_fauxfont true def

}

{

dup length 3 add dict

begin

{1 index /FID ne {def}{pop pop} ifelse }

forall

FontType 0 ne

{

/Encoding Encoding dup length array copy

dup 16#27 /quotesingle put

dup 16#60 /grave put

_regOrdering /Adobe-Japan1 eq

{dup 16#5c /yen put}

if

def

/_fauxfont true def

} if

} ifelse

/WMode _wmode def

dup dup /FontName exch def

currentdict

end

definefont pop

}

{

pop

}

ifelse

/_pdf_FontDirectory 3 1 roll _safeput

}

bd

Level2?

{

/Tf {

_pdf_FontDirectory 2 index 2 copy known

{get exch 3 -1 roll pop}

{pop pop}

ifelse

selectfont

} bd

}

{

/Tf {

_pdf_FontDirectory 2 index 2 copy known

{get exch 3 -1 roll pop}

{pop pop}

ifelse

exch findfont exch

dup type /arraytype eq

{makefont}

{scalefont}

ifelse

setfont

} bd

}

ifelse

/cshow where

{

pop /pdf_cshow /cshow load dd

/pdf_remove2 {pop pop} dd

}

{

/pdf_cshow {exch forall} dd

/pdf_remove2 {} dd

} ifelse

/pdf_xshow

{

/_pdf_na xdd

/_pdf_i 0 dd

currentpoint

/_pdf_y xdd

/_pdf_x xdd

{

pdf_remove2

_pdf_str1 exch 0 exch put

_pdf_str1 /_pdf_showproc load exec

{_pdf_na _pdf_i get} stopped

{ pop pop }

{

_pdf_x _pdf_y moveto

0

rmoveto

}

ifelse

_pdf_i 1 add /_pdf_i xdd

currentpoint

/_pdf_y xdd

/_pdf_x xdd

}

exch

pdf_cshow

} bd

/pdf_yshow

{

/_pdf_na xdd

/_pdf_i 0 dd

currentpoint

/_pdf_y xdd

/_pdf_x xdd

{

pdf_remove2

_pdf_str1 exch 0 exch put

_pdf_str1 /_pdf_showproc load exec

{_pdf_na _pdf_i get} stopped

{ pop pop }

{

_pdf_x _pdf_y moveto

0 exch

rmoveto

}

ifelse

_pdf_i 1 add /_pdf_i xdd

currentpoint

/_pdf_y xdd

/_pdf_x xdd

}

exch

pdf_cshow

} bd

/pdf_xyshow

{

/_pdf_na xdd

/_pdf_i 0 dd

currentpoint

/_pdf_y xdd

/_pdf_x xdd

{

pdf_remove2

_pdf_str1 exch 0 exch put

_pdf_str1 /_pdf_showproc load exec

{_pdf_na _pdf_i get} stopped

{ pop pop }

{

{_pdf_na _pdf_i 1 add get} stopped

{ pop pop pop}

{

_pdf_x _pdf_y moveto

rmoveto

}

ifelse

}

ifelse

_pdf_i 2 add /_pdf_i xdd

currentpoint

/_pdf_y xdd

/_pdf_x xdd

}

exch

pdf_cshow

} bd

/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd

/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd

/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd

Level2? _ColorSep5044? not and

{

/pdfxs {{xshow} stopped {pdfl1xs} if} bd

/pdfys {{yshow} stopped {pdfl1ys} if} bd

/pdfxys {{xyshow} stopped {pdfl1xys} if} bd

}

{

/pdfxs /pdfl1xs load dd

/pdfys /pdfl1ys load dd

/pdfxys /pdfl1xys load dd

} ifelse

/pdf_charpath {false charpath} bd

/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd

/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd

/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd

/pdf_strokepath

{

{

pdf_remove2

_pdf_str1 exch 0 exch put

_pdf_str1 false charpath

currentpoint S moveto

} bind

exch pdf_cshow

} bd

/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd

/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd

/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd

Level2? {currentglobal true setglobal} if

/d0/setcharwidth ld

/nND {{/.notdef} repeat} bd

/T3Defs {

/BuildChar

{

1 index /Encoding get exch get

1 index /BuildGlyph get exec

}

def

/BuildGlyph {

exch begin

GlyphProcs exch get exec

end

} def

/_pdfT3Font true def

} bd

/_pdfBoldRomanWidthProc

{

stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth

0 0

} bd

/_pdfType0WidthProc

{

dup stringwidth 0 0 moveto

2 index true charpath pathbbox

0 -1

7 index 2 div .88

setcachedevice2

pop

0 0

} bd

/_pdfType0WMode1WidthProc

{

dup stringwidth

pop 2 div neg -0.88

2 copy

moveto

0 -1

5 -1 roll true charpath pathbbox

setcachedevice

} bd

/_pdfBoldBaseFont

11 dict begin

/FontType 3 def

/FontMatrix[1 0 0 1 0 0]def

/FontBBox[0 0 1 1]def

/Encoding cHexEncoding def

/_setwidthProc /_pdfBoldRomanWidthProc load def

/_bcstr1 1 string def

/BuildChar

{

exch begin

_basefont setfont

_bcstr1 dup 0 4 -1 roll put

dup

_setwidthProc

3 copy

moveto

show

_basefonto setfont

moveto

show

end

}bd

currentdict

end

def

pdf_has_composefont?

{

/_pdfBoldBaseCIDFont

11 dict begin

/CIDFontType 1 def

/CIDFontName /_pdfBoldBaseCIDFont def

/FontMatrix[1 0 0 1 0 0]def

/FontBBox[0 0 1 1]def

/_setwidthProc /_pdfType0WidthProc load def

/_bcstr2 2 string def

/BuildGlyph

{

exch begin

_basefont setfont

_bcstr2 1 2 index 256 mod put

_bcstr2 0 3 -1 roll 256 idiv put

_bcstr2 dup _setwidthProc

3 copy

moveto

show

_basefonto setfont

moveto

show

end

}bd

currentdict

end

def

/_pdfDefineIdentity-H

{

/Identity-H /CMap PDFText /pdf_resourcestatus get exec

{

pop pop

}

{

/CIDInit/ProcSet findresource begin 12 dict begin

begincmap

/CIDSystemInfo

3 dict begin

/Registry (Adobe) def

/Ordering (Identity) def

/Supplement 0 def

currentdict

end

def

/CMapName /Identity-H def

/CMapVersion 1 def

/CMapType 1 def

1 begincodespacerange

<0000> <ffff>

endcodespacerange

1 begincidrange

<0000> <ffff> 0

endcidrange

endcmap

CMapName currentdict/CMap defineresource pop

end

end

} ifelse

} def

} if

/_pdfVerticalRomanT3Font

10 dict begin

/FontType 3 def

/FontMatrix[1 0 0 1 0 0]def

/FontBBox[0 0 1 1]def

/_bcstr1 1 string def

/BuildChar

{

exch begin

_basefont setfont

_bcstr1 dup 0 4 -1 roll put

dup

_pdfType0WidthProc

moveto

show

end

}bd

currentdict

end

def

Level2? {setglobal} if

/MakeBoldFont

{

dup /ct_SyntheticBold known

{

dup length 3 add dict begin

CopyFont

/ct_StrokeWidth .03 0 FontMatrix idtransform pop def

/ct_SyntheticBold true def

currentdict

end

definefont

}

{

dup dup length 3 add dict

begin

CopyFont

/PaintType 2 def

/StrokeWidth .03 0 FontMatrix idtransform pop def

/dummybold currentdict

end

definefont

dup /FontType get dup 9 ge exch 11 le and

{

_pdfBoldBaseCIDFont

dup length 3 add dict copy begin

dup /CIDSystemInfo get /CIDSystemInfo exch def

/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont

/_basefont exch def

/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont

/_basefonto exch def

currentdict

end

/CIDFont defineresource

}

{

_pdfBoldBaseFont

dup length 3 add dict copy begin

/_basefont exch def

/_basefonto exch def

currentdict

end

definefont

}

ifelse

}

ifelse

} bd

/MakeBold {

1 index

_pdf_FontDirectory 2 index 2 copy known

{get}

{exch pop}

ifelse

findfont

dup

/FontType get 0 eq

{

dup /WMode known {dup /WMode get 1 eq }{false} ifelse

version length 4 ge

and

{version 0 4 getinterval cvi 2015 ge }

{true}

ifelse

{/_pdfType0WidthProc}

{/_pdfType0WMode1WidthProc}

ifelse

_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put

{MakeBoldFont} Type0CopyFont definefont

}

{

dup /_fauxfont known not 1 index /SubstMaster known not and

{

_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put

MakeBoldFont

}

{

2 index 2 index eq

{ exch pop }

{

dup length dict begin

CopyFont

currentdict

end

definefont

}

ifelse

}

ifelse

}

ifelse

pop pop

dup /dummybold ne

{/_pdf_FontDirectory exch dup _safeput }

{ pop }

ifelse

}bd

/MakeItalic {

_pdf_FontDirectory exch 2 copy known

{get}

{exch pop}

ifelse

dup findfont

dup /FontInfo 2 copy known

{

get

/ItalicAngle 2 copy known

{get 0 eq }

{ pop pop true}

ifelse

}

{ pop pop true}

ifelse

{

exch pop

dup /FontType get 0 eq Level2? not and

{ dup /FMapType get 6 eq }

{ false }

ifelse

{

dup /WMode 2 copy known

{

get 1 eq

{ _italMtx_WMode1Type0 }

{ _italMtxType0 }

ifelse

}

{ pop pop _italMtxType0 }

ifelse

}

{

dup /WMode 2 copy known

{

get 1 eq

{ _italMtx_WMode1 }

{ _italMtx }

ifelse

}

{ pop pop _italMtx }

ifelse

}

ifelse

makefont

dup /FontType get 42 eq Level2? not or

{

dup length dict begin

CopyFont

currentdict

end

}

if

1 index exch

definefont pop

/_pdf_FontDirectory exch dup _safeput

}

{

pop

2 copy ne

{

/_pdf_FontDirectory 3 1 roll _safeput

}

{ pop pop }

ifelse

}

ifelse

}bd

/MakeBoldItalic {

/dummybold exch

MakeBold

/dummybold

MakeItalic

}bd

Level2?

{

/pdf_CopyDict

{1 index length add dict copy}

def

}

{

/pdf_CopyDict

{

1 index length add dict

1 index wcheck

{ copy }

{ begin

{def} forall

currentdict

end

}

ifelse

}

def

}

ifelse

/pdf_AddEuroGlyphProc

{

currentdict /CharStrings known

{

CharStrings /Euro known not

{

dup

/CharStrings

CharStrings 1 pdf_CopyDict

begin

/Euro pdf_EuroProcSet 4 -1 roll get def

currentdict

end

def

/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def

/pdf_PathOps /pdf_PathOps load def

/Symbol eq

{

/Encoding Encoding dup length array copy

dup 160 /Euro put def

}

if

}

{ pop

}

ifelse

}

{ pop

}

ifelse

}

def

Level2? {currentglobal true setglobal} if

/pdf_PathOps 4 dict dup begin

/m {moveto} def

/l {lineto} def

/c {curveto} def

/cp {closepath} def

end

def

/pdf_PSBuildGlyph

{

gsave

8 -1 roll pop

7 1 roll

currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse

dup 9 1 roll

{

currentdict /StrokeWidth 2 copy known

{

get 2 div

5 1 roll

4 -1 roll 4 index sub

4 1 roll

3 -1 roll 4 index sub

3 1 roll

exch 4 index add exch

4 index add

5 -1 roll pop

}

{

pop pop

}

ifelse

}

if

setcachedevice

pdf_PathOps begin

exec

end

{

currentdict /StrokeWidth 2 copy known

{ get }

{ pop pop 0 }

ifelse

setlinewidth stroke

}

{

fill

}

ifelse

grestore

} def

/pdf_EuroProcSet 13 dict def

pdf_EuroProcSet

begin

/Courier-Bold

{

600 0 6 -12 585 612

{

385 274 m

180 274 l

179 283 179 293 179 303 c

179 310 179 316 180 323 c

398 323 l

423 404 l

197 404 l

219 477 273 520 357 520 c

409 520 466 490 487 454 c

487 389 l

579 389 l

579 612 l

487 612 l

487 560 l

449 595 394 612 349 612 c

222 612 130 529 98 404 c

31 404 l

6 323 l

86 323 l

86 304 l

86 294 86 284 87 274 c

31 274 l

6 193 l

99 193 l

129 77 211 -12 359 -12 c

398 -12 509 8 585 77 c

529 145 l

497 123 436 80 356 80 c

285 80 227 122 198 193 c

360 193 l

cp

600 0 m

}

pdf_PSBuildGlyph

} def

/Courier-BoldOblique /Courier-Bold load def

/Courier

{

600 0 17 -12 578 584

{

17 204 m

97 204 l

126 81 214 -12 361 -12 c

440 -12 517 17 578 62 c

554 109 l

501 70 434 43 366 43 c

266 43 184 101 154 204 c

380 204 l

400 259 l

144 259 l

144 270 143 281 143 292 c

143 299 143 307 144 314 c

418 314 l

438 369 l

153 369 l

177 464 249 529 345 529 c

415 529 484 503 522 463 c

522 391 l

576 391 l

576 584 l

522 584 l

522 531 l

473 566 420 584 348 584 c

216 584 122 490 95 369 c

37 369 l

17 314 l

87 314 l

87 297 l

87 284 88 272 89 259 c

37 259 l

cp

600 0 m

}

pdf_PSBuildGlyph

} def

/Courier-Oblique /Courier load def

/Helvetica

{

556 0 24 -19 541 703

{

541 628 m

510 669 442 703 354 703 c

201 703 117 607 101 444 c

50 444 l

25 372 l

97 372 l

97 301 l

49 301 l

24 229 l

103 229 l

124 67 209 -19 350 -19 c

435 -19 501 25 509 32 c

509 131 l

492 105 417 60 343 60 c

267 60 204 127 197 229 c

406 229 l

430 301 l

191 301 l

191 372 l

455 372 l

479 444 l

194 444 l

201 531 245 624 348 624 c

433 624 484 583 509 534 c

cp

556 0 m

}

pdf_PSBuildGlyph

} def

/Helvetica-Oblique /Helvetica load def

/Helvetica-Bold

{

556 0 12 -19 563 710

{

563 621 m

537 659 463 710 363 710 c

216 710 125 620 101 462 c

51 462 l

12 367 l

92 367 l

92 346 l

92 337 93 328 93 319 c

52 319 l

12 224 l

102 224 l

131 58 228 -19 363 -19 c

417 -19 471 -12 517 18 c

517 146 l

481 115 426 93 363 93 c

283 93 254 166 246 224 c

398 224 l

438 319 l

236 319 l

236 367 l

457 367 l

497 462 l

244 462 l

259 552 298 598 363 598 c

425 598 464 570 486 547 c

507 526 513 517 517 509 c

cp

556 0 m

}

pdf_PSBuildGlyph

} def

/Helvetica-BoldOblique /Helvetica-Bold load def

/Symbol

{

750 0 20 -12 714 685

{

714 581 m

650 645 560 685 465 685 c

304 685 165 580 128 432 c

50 432 l

20 369 l

116 369 l

115 356 115 347 115 337 c

115 328 115 319 116 306 c

50 306 l

20 243 l

128 243 l

165 97 300 -12 465 -12 c

560 -12 635 25 685 65 c

685 155 l

633 91 551 51 465 51 c

340 51 238 131 199 243 c

555 243 l

585 306 l

184 306 l

183 317 182 326 182 336 c

182 346 183 356 184 369 c

614 369 l 644 432 l

199 432 l

233 540 340 622 465 622 c

555 622 636 580 685 520 c

cp

750 0 m

}

pdf_PSBuildGlyph

} def

/Times-Bold

{

500 0 16 -14 478 700

{

367 308 m

224 308 l

224 368 l

375 368 l

380 414 l

225 414 l

230 589 257 653 315 653 c

402 653 431 521 444 457 c

473 457 l

473 698 l

444 697 l

441 679 437 662 418 662 c

393 662 365 700 310 700 c

211 700 97 597 73 414 c

21 414 l

16 368 l

69 368 l

69 359 68 350 68 341 c

68 330 68 319 69 308 c

21 308 l

16 262 l

73 262 l

91 119 161 -14 301 -14 c

380 -14 443 50 478 116 c

448 136 l

415 84 382 40 323 40 c

262 40 231 77 225 262 c

362 262 l

cp

500 0 m

}

pdf_PSBuildGlyph

} def

/Times-BoldItalic

{

500 0 9 -20 542 686

{

542 686 m

518 686 l

513 673 507 660 495 660 c

475 660 457 683 384 683 c

285 683 170 584 122 430 c

58 430 l

34 369 l

105 369 l

101 354 92 328 90 312 c

34 312 l

9 251 l

86 251 l

85 238 84 223 84 207 c

84 112 117 -14 272 -14 c

326 -14 349 9 381 9 c

393 9 393 -10 394 -20 c

420 -20 l

461 148 l

429 148 l

416 109 362 15 292 15 c

227 15 197 55 197 128 c

197 162 204 203 216 251 c

378 251 l

402 312 l

227 312 l

229 325 236 356 241 369 c

425 369 l

450 430 l

255 430 l

257 435 264 458 274 488 c

298 561 337 654 394 654 c

437 654 484 621 484 530 c

484 516 l

516 516 l

cp

500 0 m

}

pdf_PSBuildGlyph

} def

/Times-Italic

{

500 0 23 -10 595 692

{

399 317 m

196 317 l

199 340 203 363 209 386 c

429 386 l

444 424 l

219 424 l

246 514 307 648 418 648 c

448 648 471 638 492 616 c

529 576 524 529 527 479 c

549 475 l

595 687 l

570 687 l

562 674 558 664 542 664 c

518 664 474 692 423 692 c

275 692 162 551 116 424 c

67 424 l

53 386 l

104 386 l

98 363 93 340 90 317 c

37 317 l

23 279 l

86 279 l

85 266 85 253 85 240 c

85 118 137 -10 277 -10 c

370 -10 436 58 488 128 c

466 149 l

424 101 375 48 307 48 c

212 48 190 160 190 234 c

190 249 191 264 192 279 c

384 279 l

cp

500 0 m

}

pdf_PSBuildGlyph

} def

/Times-Roman

{

500 0 10 -12 484 692

{

347 298 m

171 298 l

170 310 170 322 170 335 c

170 362 l

362 362 l

374 403 l

172 403 l

184 580 244 642 308 642 c

380 642 434 574 457 457 c

481 462 l

474 691 l

449 691 l

433 670 429 657 410 657 c

394 657 360 692 299 692 c

204 692 94 604 73 403 c

22 403 l

10 362 l

70 362 l

69 352 69 341 69 330 c

69 319 69 308 70 298 c

22 298 l

10 257 l

73 257 l

97 57 216 -12 295 -12 c

364 -12 427 25 484 123 c

458 142 l

425 101 384 37 316 37 c

256 37 189 84 173 257 c

335 257 l

cp

500 0 m

}

pdf_PSBuildGlyph

} def

end

Level2? {setglobal} if

currentdict readonly pop end

%%EndResource

PDFText begin

[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis

/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute

/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde

/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex

/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls

/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash

/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef

/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash

/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef

/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe

/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide

/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright

/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand

/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex

/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex

/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla

/hungarumlaut/ogonek/caron

0 TE

[1/dotlessi/caron 39/quotesingle 96/grave 

127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis

/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE

/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft

/quotedblright/bullet/endash/emdash/tilde/trademark/scaron

/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling

/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine

/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus

/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla

/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters

/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla

/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis

/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash

/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave

/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute

/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde

/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute

/ucircumflex/udieresis/yacute/thorn/ydieresis

1 TE

end

currentdict readonly pop

end end

/currentpacking where {pop setpacking}if

PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin

PDFVars/DocInitAll get exec PDFVars/InitAll get exec

PDFVars/TermAll get exec end end



%%EndSetup

PDFVars begin PDF begin PDFVars/InitAll get exec

280 214 414 217 rectclip

[ 0 -1 1 0 66.1705 710.16289 ] concat

/N10 [/DeviceRGB] /ColorSpace defineRes pop



%%BeginResource: font HGGMCN+Arial,Bold

11 dict begin

/FontName /HGGMCN+Arial,Bold def

/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def

/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def

/PaintType 0 def

/FontType 1 def

/FontBBox { 0 0 0 0 } def

/FontInfo 1 dict dup begin

  /OrigFontType /TrueType def

end readonly def

currentdict

end



systemdict begin

dup /Private 7 dict dup begin

/BlueValues [-15 0 600 650] def

/MinFeature {16 16} def

/password 5839 def

/ND {def} def

/NP {put} def

/RD {string currentfile exch readhexstring pop} def

2 index /CharStrings 655 dict dup begin

/.notdef 

<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe

ffec110deebde9f8a007323688ac> ND 

/space 

<10bf317079c7734bf7> ND 

/numbersign 

<10bf3170662650626bc5dacc64009df010462fcc4000dbd140548bf5b5ee

45f7935ae8ef5debe4831814549326140e2e890f794b8f64f3afc7af38af

c0d1459df51bc588bc9b0c0a9c8a9419541e5713ba7a68d72c32580496d5

50b7ef4bdc34f1ae6ecc7d801540b19a38f593c789df6bb81c35342169> ND 

/hyphen 

<10bf317031d662871c21e4b24b45082f0229e121b5a5798a825a63> ND 

/zero 

<10bf317047276c49b0d576f188d46ae965fd1ee754bf887206fb36232fbb

89f30bf7d7ccc04b68096e51e4fa383bd83a62a12254967c97fccef8f682

660584deed9a81b43cbb2c7b7968da901e3ae8e83e66419f304294be518a

c53bdfb87ba841dcf049e90378ca4bf02bb8502cda53c68c5e2344ff3039

a6b7677199a113d4a1df9615bbdd894af0ddf69e08437253bed3648332ae

c1e0f4e1525f1c1a3191b7b4ff> ND 

/one 

<10bf317028182169f7f13730e09770e210fcfa2d271bc92d4342c903256c

6dd594be31116a507d9e9bf7a06f7b02cb638869b9> ND 

/two 

<10bf3170560f9ea7e16bf7693df0cb4f75611840d7a72974788dc612e04a

7d391fa4118f20c60ca0210831c4216daf82822fd8577427332b85b36191

bafa300362603f7ac5486d82f6744735bd9aea952436a54773d0a34c3025

802ed04fffcb4fa74d75ac70e802cddfdbd6346360b0b1acf15e7ef6f0dd

ea8a6108bc3278173c6d152ded71a3f7dba5eefbc64d9c815a4795> ND 

/four 

<10bf31706c4c139ade6f8bf362e1c7a16dbcd949f520c66a4ee068301011

5c84fd3458c85a1ed0da84b737ec75e38936c9e254983ec49c73b3d2f1ea

186a33> ND 

/a 

<10bf31705d64e193f644676913533d4f242b6181368ed1350652c8cb7a6f

e958f60841a88d1088c20f893090b458ae087d16aa8691f1ae44882b0528

d32f3e9827d4294992e18a57652ae7d531994f09c8f3899ddffaad39408b

1529cb6c6e94b8c5c36f6038811d22f304b6662d870ece2886bb4e9f799a

c37faedbf994154341e467f29126a4c489a05c6fef9ee5143f581ea41499

e4aecea25c0711d5cc7b9f01a37e7c0b7e59d5ee83c610a480921138ec2c

f957d766614f6ccaa7ceb4e20fd6f9ac362e8c090b1abb9485ee8c51fdeb

7fc72063a72ab3373c0c6872cf9ba20b3513a2189f8a98cd5a1ee87742> ND 

/b 

<10bf31703f9318caa8e536358c1266caf254cc8f2204fcc8145cad8eae84

6e0467fc8ff5935dc2e3c66fc2d770a8a0985949d0b65840457ea91ad410

0aa2463bfc69f77dc3f3312af4f5af8db671604929816f2472f541a92a18

726d0ec028a1dec3ccc92634e9b9280c8c5edb353f275531b9bfb7d0ec96

fab4f34fad063d2eb0f72538e85a0c78ae> ND 

/c 

<10bf317047276c49998622737f5c0fdd43bdb1b35b15caae7eb2c80264ad

f0005e1c6be7a1a08efb8ae0111a7ff9c16d6d1d6fe6a62b9718659cdf71

ec1fec12732e715c04b3f3a8feb95e8d0f9e002393845281717573027f79

ad8c8ea5dce4faf3243344c83485cc434093ad2e51e73ce85594056ff3cf

8de95991fd7222c7dec9d4bc6113b2> ND 

/i 

<10bf317021cc67b2bc312fc6a7ad37016808b8c74342617d801906e8ad23

4c7210637a5c2e2ea339f24d0c> ND 

/l 

<10bf317021cc67b2bc31c11814793bc69b430b318ded78131a> ND 

/m 

<10bf31703bc84f280bc926798acdec2516269e7061028d385a31d255844f

a27fc6b4cdd6f6ba3dfabbbaadef207eca864f3bc97abd9a4f1b978df039

4779a47e3088a94b9cee6d3b276eef4d4950e88ef4a61f93e0b6cde961dc

7ec12956bd3a56a59704c6c5b5a401c3674bc856b6c34f276e7f1bc3056d

89b4805ca25b43894c427bc43b36554ede70476f7ee25d1a6c03ed9f5e40

5c72135defa96ede67a5a8ef5fea114c19a857db71952cb83f4d11> ND 

/n 

<10bf31702094fda2efce4110428b7f86f5f2073cab682ca78d0dc97da563

e3301b964801f725812f64cb67abc1e242f6d8dcd921f1fbf9e05fee92c3

cf16b5bf6083337a59bf026de7fa548a247b8bde12c672aa0ba0501ccc35

fcca587d7573f11dfc32a2ac31516847d39fb276060c6171da> ND 

/o 

<10bf317041f0d680f4930f6b0672f7536ce2eb70a2366463cc9006c590f6

6bbb22b4a706eff4a93c95880cecbbf82d6e623efa721926a49ba75b71ef

97d0e3d8c35761734c54d6d734cb61cf4c4d7050d90fa115600d26f47050

dfb8739452ed0059ffdca41c137f0b71425a690a4da83dcf8abcf17c206e

c5eff5dd0d7b85b999c37123dfb769cd075b5a162cb33d72426c> ND 

/p 

<10bf31703d364b58d236360a3109f388a509dc9806d07d5bc445174ad942

7c9600246e60ea62f48529a60136f844b413bd7834b903aeb5ec3a65352a

708c943d46c286b502a39b69aec9bc15c2a1798b51edb224db01e94ff1eb

dbf1e97f7f79a2c4ac7f7ccc29f5a1c29ed2d05ed3e5ff111a8b097f8d17

72a84cce0bcd066f78e2de698d38b96a99a99313e7a6639d82> ND 

/s 

<10bf317050d961e87d157c0fe86ec5afecbd608ce0f232c64dcfb1d39b45

2e71b8ca2a92c46173a52c993c8ea0e3a6a97bbca89eebc0e87a68da7dcf

335cb16989a377c8400340e09bb7a3a4fae54003803791fa4d2f5b88afdc

392f17afecc8a037b6118f07b51c97b137676b140e2fba0e4b7ecc574c70

cbfa35d84fd49bc18c067342180503665d383fcdebee907501f8719ff862

5030352810efab946329f109adefea2f39c8182336b9eb95b38d69ca43cf

161d7fb7e8f46433cafa> ND 

/t 

<10bf3170688ce4cb1d2f5bf487137bec8ecb87b4485146ce17824d997ac5

95ab4afb2e80a065a802ee3f010bb37eac91d0f6ed42677aa9dde7e1ad01

769b95b971dec6d1669588801bb2fb04109e79e9771f019783524f2f268e

35dce126a03e55d028a6951cc9b40e649071f577> ND 

/u 

<10bf317022f1ca2cc2a22c3ff97c1232bc55839582d9c5ff7e86bfa4508d

4c6c2a32b8a91c23bc7417819a6d61bb6c4ffa588f9ea417cfc189ff4ca4

86806cfbdc09b2f0ef54b54c53e50d4afcfcb2df030b19aa33138b0a422d

d58054461b41c9166e86f2fb1f6b43052b68dc3202c1cc> ND 

end

end

put

put

dup /FontName get exch definefont pop

end

/HGGMCN+Arial,Bold findfont /Encoding get

dup 0 /.notdef put

dup 32 /space put

dup 35 /numbersign put

dup 45 /hyphen put

dup 48 /zero put

dup 49 /one put

dup 50 /two put

dup 52 /four put

dup 97 /a put

dup 98 /b put

dup 99 /c put

dup 105 /i put

dup 108 /l put

dup 109 /m put

dup 110 /n put

dup 111 /o put

dup 112 /p put

dup 115 /s put

dup 116 /t put

dup 117 /u put

dup 160 /space put

dup 173 /hyphen put

pop

%%EndResource

[/N15/HGGMCN+Arial,Bold 1 TZ

%%BeginResource: font HGGKAF+Arial

11 dict begin

/FontName /HGGKAF+Arial def

/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def

/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def

/PaintType 0 def

/FontType 1 def

/FontBBox { 0 0 0 0 } def

/FontInfo 1 dict dup begin

  /OrigFontType /TrueType def

end readonly def

currentdict

end



systemdict begin

dup /Private 7 dict dup begin

/BlueValues [-15 0 600 650] def

/MinFeature {16 16} def

/password 5839 def

/ND {def} def

/NP {put} def

/RD {string currentfile exch readhexstring pop} def

2 index /CharStrings 655 dict dup begin

/.notdef 

<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe

ffec110deebde9f8a007323688ac> ND 

/space 

<10bf317079c7734bf7> ND 

/zero 

<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7

a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b

8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e

82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28

f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7

f39a88f359b0b2fcad10a34d95> ND 

/one 

<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c

a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 

/two 

<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700

a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e

5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f

08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00

2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33

8d> ND 

/three 

<10bf317047276c49b32f77fc0b1d0c5740dcd2446a925ec070d898870164

1dba6c5defb41d909040a164fdb0a088fefa45fff299b57b0e194251a4a8

b9cf3bc1815fd2c5ba06e651f9d7799098b4541de9c35043282b335f2de1

7def94eec0695fa30f7aaa5574cd9d280a8b4d225396feeeafb4b20c3fcc

9f12e751228b7464328a957a71c1d6fc11ef53a8f692024ab80f5e0d7623

62b42a462a2bf96d5a0db86097e421e5cb8c7d7a0900e6cfd70978f26b60

122332f14359637710d630381bc4f9c629fd5be208af03ab6a69f0ba40b9

a2> ND 

/four 

<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e

2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 

/five 

<10bf317047276c49b09acfa7bc79efc344047909ce1f733e1cd354b07630

213f625adb3ae8b5aa6a51c1055a59d5f55e13f6cd6e1d9a82c372ef809e

0ee864af865bf5dd5f7dae9a46388470afbd9e2e8c39b7ea4fc9ab800d6e

8ab2edc1e3d36e194904842b1236ff6f70f88f5551621a9fa448c516e732

df410d140d211e3fe0becb6d0a54202b80a6977f> ND 

/six 

<10bf3170435d0d4425184fc061c7faa8dc6add2447c73d0495af3ae4cbe6

71b2a7700f040b5d9fec272a0180dbc9357b9de2d4d226b00cab96cfa6ff

d4525fd5fdbe5aade510cfc7cacabe52b0525986d0147839af70fe53fbd7

f15198bbfd1bae2061f4f49fd71dc08e9970f70083123f8d66b634fb7315

bebd4054f7add22d02ae4b05edbd93dd36100ec8d8de9338fa3376fac047

09884a6568cb1a4a1bc019a4541fd5336bbf3178a330d69e79b2faeff373

c4a7266727a8881d997fda33f08bb656e21f4f69dff5317fad9fb438e4a6

11e7fbf82c> ND 

/seven 

<10bf317048559e9c292b4762aa54ba120b5bb6d9743398f6558de0cda9ce

72c94d95b651df1bda9b63361a928dc3b98c779dfd157220ceb78b8ebeab

638d0f6753cf0f10ef> ND 

/A 

<10bf3170789bec1ccf5fb017e1dd1362ac54cb2fa3a278c1c5e8b8e0184d

7cbeaa35d4ddaa02f35f83f589e53f609414a1e8dd86a2916a5d28875546

282a3c313b2605b04804> ND 

/B 

<10bf317026ba62063ac1fc9b1b7e78ffd02405a6073c267edcf7d4772d8b

d58886357b255f6a34ffdb28ea7dd3bcde9e8d86152df16bbf95464b3da5

81a80241ab3a15cb834fac879964bca12ae45a2346542b45e7f82e769dc6

0e9db083a82e08534c9f6f82aa9d811f6505bf0b1bb832cbb587ac8320f0

ae1ae42aea897a566c4e8001af359257dc731487787c0d93ef9b2f1ed840

41901425e5e82bd0ae3793e0dd4c50ff12905ccd193e1ae08c7b651a3ee6

9ac2a8d60e0001b1e2cb724d65cbbbc80d6c9cf4edb8b286a76ac8c6d7e6

c234df3f063f1d91> ND 

/C 

<10bf31704fab892742fc2c6be78329c0825c84c392f40122153ca9a91165

96e2ea405597ca7f292098a14c92b8766b957d29536d6a74922bce6efa67

d7fa67d47a8ae997e897ea42f1e923c09a3ad5b1aa2186622859ef03a213

f7c26727c45c24d289e1bf8fa6a719352242839e565e8af9cb5c48758232

20530e01b09cb28b590a86024fb341940ed5d19a7e036981d38ceef64334

a577636f4f149330a371e1> ND 

/E 

<10bf317028198094ce8cd275e305c79a7a258ddd928bd9dc896c51a549b4

869242612fc9caa06c2483d03d9996ef> ND 

/R 

<10bf31702819c97bfff21764697e50774ba74072e0daf25a84b5ab81ce67

f36424a8f4f31afdf4de9e5912f7a5ba0ce90948b990647285d2500d6d57

ef6e940fb321e739e33f71f0994fb0b96bf3e18815066ca201f1578cce2a

71a0a57bc87021521bfe1b691fde6e9063a575e47bf725cfd1c0afa40b0c

a839a6c28bfd0b7f0f7469b4cf16ee3c7a54706ea2da49ba1db858f3c370

3042b60d2181c6c1afb0bef5eb> ND 

/S 

<10bf31704ab370a8a6c235279ed6c2ccfc716fa1295d141c34dd24f95c73

82e11c724a74e86021432ff58ab0f9585559c2cc7a3fe0720eadda5eee3e

cb055c76e8d7f22cfddbcfbe4ee1a562282b307d86efef90d9a8c71c96ab

9543712fa6240508ea1f38536804c47dfcc21f777c873fc11b7e20f7a228

b35e8d75f100a7da6082feb065d087853344b8bf00df7291cc74173d8c17

2964ca635a4e981f1604dc10d454f452e70073d386bcbe3ed4c09e72aa02

e7eb1e382ccb2fe70e1e9e3084e7824b4261723bffe42f4fc72d36ddcdd9

e884d10e18a55004b6149a9b0c7ead4b42afa8906a80deea322a930f4d91

ac35a6e6186e5d082f09> ND 

/V 

<10bf31707d937b42ca5aa917fb8735867898e23266ce63f299decbd88902

a58f50d327fa84a3893c0fe3af9d5b8d8ece1349c10cbf> ND 

/e 

<10bf3170422fdb64737aa996af2c16aa574465e2c930c2d6c70f2c72ffe1

f5ae975a706a2cc8ae00b6163837b6e50d4221eaf76eb409c442c6352c58

b6f53cd585b0d4d507cc48acee66f883df189a3c8bf101622dd4022876bd

14603c08f3944b80e2f5e4e7a62999282a391fd9d657c5f0af2673747752

c83501ca742ca70911b84f52143e873794bcaff697373392d39b09bb> ND 

/f 

<10bf31706629561882b73d5b02cebd16b0942e445fbe6e3232b3823cbdb2

63dcf8e5b5846268df4eba2210bb667f400c46f76ed43d4b268aed98cf98

689dff659a93d69b1917cc1e5f49aadef7d4b3b6109675927aeb98089c> ND 

/g 

<10bf3170599a82ae9f38a9e935b4e0f3d7776326ecd8d725592828643987

c2e996bcd7d71545c3eb62141100b3029b5db47d5a1c74ff1f384da4be0e

6cf0ee7a06a6ed308265b547c61245dd74ea50abb0d2d3cd2399420ee06e

7956a28a86fe6b998b8722a5746802f533a367725615f062015db919f3df

3c1161274e44726519555c137d48159ae02477eb468fd9fc7a3d8570c8a3

e043f93c86fb8138e2b07c9d11fc45f70eb798bfa21ffadc315e7d76733b

5b2c49936a2059f2200afe935aa8ae6d77bf03212f2cde46> ND 

/i 

<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65

3b18436e1776> ND 

/n 

<10bf31703f932f5ecb68c849e33d657776fc326fe2f54f4bc03b7f3fa95b

3e37550287a3822f66bab52dc802d77dcc608442caba0a099550a895735f

067f96366abd71cd4bfcf52bc4da085550e8eac7df2e04a58377ae472993

06a8805e14d9bcbf32aaef31> ND 

/r 

<10bf31703e6aa4be08d01c511eaadd0473a3483c7b936ed6e6cf91cffcbd

a815b8df60ae150c20432c17a46c0682480f6226770a8905e960aec3fe5e

934f4cc994b08abf0fc9d432168086e4> ND 

/t 

<10bf31706fd71d386b6c99b1d09bb1ad104eda9ab80d9f94a735d54116f5

9c58b6bda429b5392910a11f88b68881d1c7fdb07e40a06d14aa641d6e68

4a64544555b97e482a6c7cb4aa6fb83472e09b52ff42b290b85900fae15f

7904eb69f44b98bcd014> ND 

/y 

<10bf317069b1fd7143194d5a8e15b6f90ac84d61c2210d0a37e4b79b318e

a37e94e1eafeb299771b049b5875b1faaabb3f4a1c610b363bb1cc81f3dc

2321559cc23d3a2ce6164f6c1accc00d3218419aedc30e344ac526b1b865

4cc98fc6c8753aea96a41d15ebdbd9a87b663f4abccf42a0073c7de0> ND 

end

end

put

put

dup /FontName get exch definefont pop

end

/HGGKAF+Arial findfont /Encoding get

dup 0 /.notdef put

dup 32 /space put

dup 48 /zero put

dup 49 /one put

dup 50 /two put

dup 51 /three put

dup 52 /four put

dup 53 /five put

dup 54 /six put

dup 55 /seven put

dup 65 /A put

dup 66 /B put

dup 67 /C put

dup 69 /E put

dup 82 /R put

dup 83 /S put

dup 86 /V put

dup 101 /e put

dup 102 /f put

dup 103 /g put

dup 105 /i put

dup 110 /n put

dup 114 /r put

dup 116 /t put

dup 121 /y put

dup 160 /space put

pop

%%EndResource

[/N13/HGGKAF+Arial 1 TZ

false setSA

n

27.48 781.07 540 -720 re

1 1 1 setrgbcolor

f

n

241.8 691.551 267.36 -487.44 re

f

1 J

1 j

0.119995 w

10 M

[] 0 d

n

241.68 203.991 267.48 487.56 re

0 0 0  setrgbcolor

S

n

291.36 621.471 174.36 -353.4 re

1 1 1  setrgbcolor

f

q

n

436.32 268.071 0.119995 353.4 re

W

n

n

436.32 268.071 m

436.32 621.471 l

0 0 0  setrgbcolor

S

Q

q

n

408 268.071 0.119995 353.4 re

W

n

n

408 268.071 m

408 621.471 l

0 0 0  setrgbcolor

S

Q

q

n

378.6 268.071 0.119995 353.4 re

W

n

n

378.6 268.071 m

378.6 621.471 l

0 0 0  setrgbcolor

S

Q

q

n

349.2 268.071 0.119995 353.4 re

W

n

n

349.2 268.071 m

349.2 621.471 l

0 0 0  setrgbcolor

S

Q

q

n

287.28 268.071 182.52 353.4 re

298.44 298.071 47.64 77.4 re

eoclip

n

n

320.76 268.071 m

320.76 621.471 l

0 0 0  setrgbcolor

S

Q

q

n

291.36 268.071 0.119995 353.4 re

W

n

n

291.36 268.071 m

291.36 621.471 l

0 0 0  setrgbcolor

S

Q

q

n

236.64 198.831 276.72 498 re

298.44 298.071 47.64 77.4 re

eoclip

n

q

0 1.0097 0.990402 0 0 0 cm

2 J

0 j

1.02299 w

n

265.505 294.175 m

615.523 294.175 l

0.501999 0.501999 0.501999  setrgbcolor

S

Q

Q

q

0 1.0097 0.990402 0 0 0 cm

2 J

0 j

1.02299 w

n

615.523 294.175 m

615.523 470.22 l

615.523 470.22 m

265.505 470.22 l

265.505 470.22 m

265.505 294.175 l

0.501999 0.501999 0.501999  setrgbcolor

S

Q

q

0 1.0097 0.990402 0 0 0 cm

2 J

0 j

1.02299 w

n

302.349 450.835 50.155 19.386 re

q

0 0 1  setrgbcolor

eofill

Q

0 0 0  setrgbcolor

S

Q

q

0 1.0097 0.990402 0 0 0 cm

2 J

0 j

1.02299 w

n

477.298 318.771 50.155 151.449 re

q

0 0 1  setrgbcolor

eofill

Q

0 0 0  setrgbcolor

S

Q

q

0 1.0097 0.990402 0 0 0 cm

2 J

0 j

1.02299 w

n

352.504 437.507 50.155 32.713 re

q

1 0.800003 0  setrgbcolor

eofill

Q

0 0 0  setrgbcolor

S

Q

q

0 1.0097 0.990402 0 0 0 cm

2 J

0 j

1.02299 w

n

527.454 465.132 50.155 5.08899 re

q

1 0.800003 0  setrgbcolor

eofill

Q

0 0 0  setrgbcolor

S

Q

2 J

0 j

n

291.36 268.071 m

465.72 268.071 l

465.72 263.871 m

465.72 268.071 l

436.32 263.871 m

436.32 268.071 l

408 263.871 m

408 268.071 l

378.6 263.871 m

378.6 268.071 l

349.2 263.871 m

349.2 268.071 l

320.76 263.871 m

320.76 268.071 l

291.36 263.871 m

291.36 268.071 l

465.72 268.071 m

465.72 621.471 l

469.8 268.071 m

465.72 268.071 l

469.8 444.711 m

465.72 444.711 l

469.8 621.471 m

465.72 621.471 l

0 0 0  setrgbcolor

S

436.08 322.79 m

/N13 [0 13.1771 -13.1771 0 0 0] Tf

(66)

[7.19858 7.19858 ] pdfys

305.28 496.43 m

(515)

[7.19858 7.19858 7.19858 ] pdfys

422.881 370.31 m

(112)

[7.31862 7.19871 7.31862 ] pdfys

450.24 550.07 m

(17)

[7.31862 7.31862 ] pdfys

469.441 250.55 m

(0) show

440.041 236.03 m

(100)

[7.19858 7.31849 7.19858 ] pdfys

411.721 236.03 m

(200)

[7.19858 7.31849 7.19858 ] pdfys

382.322 236.03 m

(300)

[7.19858 7.31849 7.19858 ] pdfys

352.922 236.03 m

(400)

[7.19858 7.31849 7.19858 ] pdfys

324.602 236.03 m

(500)

[7.19858 7.31849 7.19858 ] pdfys

295.203 236.03 m

(600)

[7.19858 7.31849 7.19858 ] pdfys

490.56 317.63 m

/N13 [0 14.1905 -14.1905 0 0 0] Tf

(ECC 160 BitRSA 1024 Bit)

[9.35992 10.3177 10.3177 4.08267 8.27729 8.27729 8.27729 4.08267 9.35992 3.11741 97.0829 

10.3177 9.35992 9.2393 4.20187 8.15809 8.27729 8.27729 8.27729 4.20187 9.2393 3.11741 

4.33233 ] pdfys

466.68 225.35 m

/N15 [-14.191 0 0 -14.1905 0 0] Tf

(# 1024-bit multiplications)

[-8.03202 -4.0826 -8.03202 -8.15832 -8.15832 -8.0377 -5.03904 -9.12179 -4.08693 -5.03904 -4.0826 

-12.2381 -9.12179 -3.96205 -5.15966 -3.96205 -9.12179 -4.08693 -4.08693 -8.15832 -8.03202 -5.03904 

-4.08693 -9.12179 -9.12179 -8.03202 ] pdfxs

n

298.56 375.351 48.48 -77.16 re

1 1 1  setrgbcolor

f

n

298.44 298.071 48.6 77.28 re

0 0 0  setrgbcolor

S

q

0 1.0097 0.990402 0 0 0 cm

1.02299 w

n

309.48 318.65 10.102 -10.177 re

q

0 0 1  setrgbcolor

eofill

Q

S

Q

315.12 326.99 m

/N13 [0 15.2044 -15.2044 0 0 0] Tf

(Sign)

[10.3206 3.1166 8.15709 8.63298 ] pdfys

q

0 1.0097 0.990402 0 0 0 cm

1.02299 w

n

309.48 342.155 10.102 -10.056 re

q

1 0.800003 0  setrgbcolor

eofill

Q

S

Q

338.4 326.99 m

(Verify)

[9.23967 8.27734 5.16033 3.11674 4.08245 6.70065 ] pdfys

n

241.68 203.991 267.48 487.56 re

S

PDFVars/TermAll get exec end end

%%PageTrailer

%%EndPage

%%Trailer

%%EOF

