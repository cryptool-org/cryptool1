# Aufruf: bc -lq bruch.txt prims.txt pi.txt
# Needs bruch.txt and prims.txt (e.g. for wallis()
# Sample output
# 
# vieta (2)
# 3.061467458920718173827679872243190934090756499885016331470405085020\
# 3682716807175378961102827382683782
# vieta (5)
# 3.140331156954752912317118524331690132143703233648186893447843409226\
# 6201320934884366221290951552463225
# 
# wallis(2)
# 2.666666666666666666666666666666666666666666666666666666666666666666\
# 6666666666666666666666666666666666
# wallis(5)
# 3.413333333333333333333333333333333333333333333333333333333333333333\
# 3333333333333333333333333333333333
# 
# leibniz(2)
# 2.666666666666666666666666666666666666666666666666666666666666666666\
# 6666666666666666666666666666666666
# leibniz(5)
# 3.339682539682539682539682539682539682539682539682539682539682539682\
# 5396825396825396825396825396825396


# Näherungsformeln für pi


define vieta (g) {

  # 2/pi = sqrt(1/2) * sqrt( 1/2 + sqrt(1/2)/2 ) ...

  auto pi, a;

  scale = 100;
  a = 0;
  pi = 1;

  for( i=1; i<=g; i++) {
    #a = sqrt( (1+a)/2 );
    a = heron( (1+a)/2 );
    pi *= a;
  }

  return 2/pi;
}



define wallis (g) {
 
  # Wallis: pi = 2 2 4 4 6 6 ...
  #         /2   1 3 3 5 5 7

  auto h, i, z, n, pi;

  if( g <= 0 ) return 0;

  bruch_res[1] = 1;
  bruch_res[2] = 1;
  z = 2;
  n = 1;

  for( i=1; i <= g; i++) {
    h = mal( bruch_res[1], bruch_res[2],  z, n );
    if( mod(i, 2) ) {n += 2;} else {z += 2;}
  }
  scale = 100;
  pi = 2 * bruch_res[1] / bruch_res[2];
  scale = 0
  return pi;
}



define leibniz (g) {

  # pi/4 = 1 - 1/3 + 1/5 - 1/7 + 1/9 ...

  auto h, i, z, n, pi;

  bruch_res[1] = 0;
  bruch_res[2] = 1;
  z = 1;
  n = 1;

  for( i=1; i<=g; i++) {
    h = plus( bruch_res[1], bruch_res[2],  z, n );
    z *= -1;
    n += 2;
  }
  scale = 100;
  pi = 4 * bruch_res[1] / bruch_res[2];
  scale = 0
  return pi;
}




define heron (c) {	# sqrt(c)    # helper function

  auto a, b, s, i

  if (c < 0) return
  if (c >= 1) {
    a = 1
    b = c
  } else {
    a = c
    b = 1
  }
  s = 1/10^scale

  while (b-a > s) {
    #print i, ") a: ", a, " b: ", b, "\n"
    b = (a+b)/2
    a = c/b
    i = i+1
  }
  #print i, ") a: ", a, " b: ", b, "\n"

  a = (a+b)/2
  return a
}


#heron(2)


