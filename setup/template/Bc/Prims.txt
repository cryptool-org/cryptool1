/*
    BC-Funktionen zum Berechnen des ggT, modularer Potenzen, Primzahlen, Teiler etc.
    Copyright (C) 2006, 2007, 2008 Martin Ramberger (rambo@uni-koblenz.de)

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/

print "\n"	# default-Ausgabe für Ergebnisdatei (zeigt AW Ende auch bei Fehler)


# dürfen vom Benutzer NICHT verändert werden:

scale = 0	# Nachkommastellen - würden die Funktionen durcheinander bringen.
maxp = 1	# global (nextprime, faktbas, primteiler) 	# Anzahl gespeicherter Primzahlen
prims[1] = 2	# global (nextprime, faktbas, primteiler) 	# erste  gespeicherte  Primzahl
								# Pfuscherei im Array prims[] verfälscht "alles"
sqrp = 4	# global (nextprime, primteiler)		# prims[maxp]^2
erat[0] = 0	# global (nextprime, erat, erat_next)		# Sieb des Eratosthenes
erat_bas = 1	# global (nextprime, erat, erat_next)		# Zahl, die erat[0] repräsentiert
faktbasi = 0	# global (faktbas, ecm)


# dürfen vom Benutzer verändert werden:

iter_mr = 10	# global (mr)
zeil = 10	# global (show, showi)
seed = 13	# global (random)
rbas = 3	# global (random)
iter_pollard = 30000 # global (pollrho)





# Funktionen:

define sig (a) {if (a<0) return -1 else if (a>0) return 1 else return 0}	# Vorzeichen
define abs (a) {if (a<0) return -a else return a}				# Betrag

define min (a,b) {if (a<=b) return a else return b}				# Minimum
define max (a,b) {if (a>=b) return a else return b}				# Maximum

define bot (x) {								# nächste ganze Zahl <= x
  auto s, x0
  if ( scale(x) == 0 ) {
    return(x)
  } else {
    s=scale; scale=0 
    x0=x/1; scale=s
    if (x==x0) return x0 else {if (sig(x)>=0) return x0 else return x0-1}
  }
}

define top (x) {								# nächste ganze Zahl >= x
  auto s, x0
  if ( scale(x) == 0 ) {
    return(x)
  } else {
    s=scale; scale=0 
    x0=x/1; scale=s
    if (x==x0) return x0 else {if (sig(x)>=0) return x0+1 else return x0}
  }
}



define mod (a,b) {		# schneller als % (vgl. Doku und teste)

  quotient = a/b		# quotient ist global (erspart schon bei euklid doppeltes Rechnen)
  return a-quotient*b
}



define euklid1 (a, b) {		# Euklid berechnet ggT

  auto r

  while (b != 0) {
  
    r = mod(a, b)
    a = b
    b = r
  }
  return abs(a)			# ggT
}



define euklid (a, b) {		# Euklid mit Vielfachsummen-Berechnung

  auto vora, vorb, x0, x1, x2, y0, y1, y2, r	# global: quotient, koeff_x, koeff_y

  vora = sig(a)
  vorb = sig(b)
  a = abs(a)
  b = abs(b)
  x0 = 1
  y0 = 0
  x1 = 0
  y1 = 1

  while (b != 0) {
  
    r = mod(a, b)
    a = b
    b = r

    x2 = x0 - quotient * x1
    y2 = y0 - quotient * y1

    x0 = x1
    y0 = y1
    x1 = x2
    y1 = y2
  }
  koeff_x = x0 * vora		# Koeffizient bei a
  koeff_y = y0 * vorb		# Koeffizient bei b
  return a			# ggT
}





define powermod (bas, exp, modul) {		# schnelle Potenz bas^exp mod modul

  auto y					# global: koeff_x, quotient

  if (modul < 1) return -1
  if (modul == 1) return 0
  if (exp < 0) {     				# a^-x = (a^-1)^x
    if ( euklid(bas, modul) > 1 ) return -1	# undefiniert
    bas = koeff_x				# koeffx ist global
    exp = -exp
  }
  if (exp == 0) return 1			# x^0 = 1
  if (bas == 0) return 0			# 0^x = 0, falls x > 0
  if (bas < 0) bas = mod(bas, modul) + modul

  y = 1      					# Ergebnis
  while (exp > 0) {

    if ( mod(exp,2) ) {
      exp = quotient
      y = mod( y * bas, modul )			# "multiply"
      if (y == 0) return 0
    } else exp = quotient

    bas = mod( bas * bas, modul)		# "square"
  }
  return y
}





define kong (a, b, m) { 			# löse Kongruenz a*x = b mod m

  auto ggt, x, i				# global: koeff_x, a[]

  m = abs(m)
  if (m < 1) return 0

  b = mod(b, m)
  if (b < 0) b = mod(b, m) + m			# Standardvertreter

  ggt = euklid(a, m)
  x = koeff_x
  if (x < 0) x = mod(x, m) + m			# Standardvertreter

  if (mod(b, ggt) > 0) {			# keine Lösung
    ggt = 0

  } else if (ggt == 1) {			# eine Lösung
    a[1] = mod(x*b, m)
    print a[1], "\n"
    a[2] = 0

  } else {					# mehr Lösungen

    m = m/ggt
    i = euklid(a/ggt, m)
    x = mod( koeff_x*b/ggt, m)
    if (x < 0) x = mod(x, m) + m

    for (i=0; i<ggt; i++) {
      a[i+1] = x+m*i				# sammeln zur späteren Verfügung
      print a[i+1], " "				# zeigen
    }
    print "\n"
    a[i+1] = 0
  }
  print "Anzahl Loesungen: "
  return ggt
}





define random (a, b) {					# Zufallszahl aus {a, ..., b}

  auto m						# global: rbas, seed

  if (a > b) {m=a; a=b; b=m}				# a,b tauschen
  m = b - a + 1						# m dient als Modul

  while ( euklid1(rbas,m) != 1 ) rbas = rbas + 1	# rbas prim zu m
  if (rbas > m) rbas = mod(rbas, m)			# kleinster Vertreter modulo m

  seed = abs(mod( (seed + 1), max(779993,m) ))
  a = mod((powermod(rbas,seed,m) + seed), m) + a	# seed addieren: trifft auch außerhalb Zm*
  rbas = a
 
  return a
}




define probe (n, a, b) {	# n Zufallszahlen aus {a, ..., b} unsortiert

  auto i

  if (n <= 0) return 0
  for (i=1; i<n; i++) {
    print random(a, b), "\n"
  }
  return random(a, b)
}






define show (a[]) {		# zeige Inhalt des angegebenen Arrays

  auto i			# global: zeil

  for (i=1; a[i]!=0; i++) {
    print a[i]
    if (zeil > 0 && mod(i, zeil) == 0) print "\n" else print " "
  }
  print "\n"
}



define showij (a[],anf,end) {	# zeige Inhalt des angegebenen Arrays von Feld anf bis Feld end

  auto i			# global: zeil

  for (i=anf; i<=end; i++) {
    print a[i]
    if (zeil > 0 && mod(i-anf+1, zeil) == 0) print "\n" else print " "
  }
  print "\n"
}




define erat (n) {		# Sieb des Eratosthenes

  auto i, j, k, p, lim				# global: prims[], erat[], erat_bas, maxp, sqrp

  k = 1; prims[k] = 2				# erste Primzahl
  if (n < 3) return 0
  if (n > 131070) n = 131070

  lim = sqrt(n)					# Grenze
  n = n/2
  for(i=1; i < n; i++) erat[i] = 2*i+1		# nur die ungeraden Zahlen betrachten
  j = 1
  for(p=3; p<=lim; p=erat[j]) {			# solange Primzahl p kleiner Wurzel(n)

    prims[++k] = p				# p in lückenlose Liste

    for (i=p*p/2; i < n; i+=p) erat[i] = 0	# Vielfache von p streichen

    j = j+1; while (erat[j] == 0) j = j+1	# Index der nächsten Primzahl
  }
  erat_bas = 1					# global: erat[0] repräsentiert 1

  for(i=j; i<=n; i++) if (erat[i]) prims[++k] = erat[i]		# lückenlose Liste
  prims[k+1] = 0				# Ende markieren
  maxp = k					# global
  sqrp = prims[maxp]^2				# global

  return maxp					# Anzahl gesammelter Primzahlen
}

maxp = erat(130000) # prims[] füllen
#i = show(prims[])




define maxabstand () {		# größte Lücke zwischen den gesammelten Primzahlen 
  auto ab, p0, p, i
  ab=0; p0=0; for(i=1;i<maxp;i++) {p=prims[i]; if((p-p0)>ab) ab=p-p0; p0=p}
  return ab
}




define erat_next (n) {		# ab n sieben mit vorhandenen Primzahlen

  auto i, j, p, lim				# global: erat[], prims[], erat_bas

  for(i=0; i<65535; i++) erat[i] = 1		# 65534 ungerade Zahlen betrachten
  j = 2
  if (n < 1) n = 1
  if (!mod(n,2)) n = n + 1			# ungerade!
  lim = sqrt(n + 131070)

  for(p=3; p && p<=lim; p=prims[j]) {		# für 3 und weitere gespeicherte Primzahlen

    i = p - mod(n-1,p)				# erste zu streichende Zahl:
    if (p >= n) i = i + p

    if (mod(i,2)) {i=(i-1)/2} else {i=(i+p-1)/2}

    for (; i<65535; i+=p) erat[i] = 0		# Vielfache von p streichen
    j = j+1
  }
  erat_bas = n					# global: erat[0] repräsentiert n

  return j					# Anzahl benutzter Primzahlen
}





define mrkern (a,d,s) {		# Kern des Miller-Rabin-Primzahltests

  auto bas, c
  #auto c	# bas global zum Nachprüfen

  bas = random(2,a-2)				# Zufallsbasis, a >= 4 ist gewährleistet

  if (euklid1(bas,a) > 1) return 0		# a keine Primzahl

  c = powermod(bas,d,a)
  if ( c == 1 || c == a-1 ) return 1		# a scheint Primzahl (bei dieser Basis)

  while (s > 1) {
    c = mod( c * c, a)
    if ( c == a-1 ) return 1			# a scheint Primzahl (bei dieser Basis)
    s = s - 1
  }
  return 0					# a keine Primzahl
}





define mr (a) {		# Miller-Rabin-Primzahltest, max. Anzahl Durchläufe: iter_mr

  auto d, s, i					# global: quotient, iter_mr

  a = abs(a)
  if (a < 2) return 0				# keine Primzahl
  if (a < 4) return a				# Primzahl, kleinste Kandidatin ist also 4
 
  d = a - 1					# Wie oft kann man a-1 halbieren?
  s = 0
  while (mod(d,2) == 0) {
    s = s + 1					# s mal
    d = quotient
  }			  			# d ist größter ungerader Teiler von a-1

  if (iter_mr < 1) iter_mr = 1			# mindestens eine Iteration

  for (i=1; i<=iter_mr; i++) {
    if ( mrkern(a,d,s) == 0 ) return 0		# keine Primzahl
  }

  return a					# wahrscheinlich Primzahl
}





define nextprime (n) {		# nächste Primzahl >= n

  auto i, a					# global erat_bas

  if (n < 3) return 2
  if (!mod(n,2)) n = n + 1			# ungerade!

  if (n < erat_bas || n > erat_bas + 130000) {
    i = erat_next(n)				# füllt erat[], setzt erat_bas
    i = 0
  } else {
    i = (n - erat_bas) / 2
    n = erat_bas
  }

  while (i<65535) {
    if (erat[i]) {
      a = n + 2*i
      if (a < sqrp) return a
      if (mr(a)) return a
    }
    i = i + 1
  }    
  return nextprime(n+2*i)
}



# http://www.primath.homepage.t-online.de/Homepagedateien/Fakt2.pdf (Karl Schwalen)
for(i=0;i<10080;i++) {
  quads10080[mod(i*i,10080)] = 1	# alle 336 Quadrate mod 10080
}


define fermat (n) {	# Fermat Faktorisierung

  auto w, q, p, lim, a, h, d

  n = abs(n)
  if ( mod(n,2) == 0 ) return(2)

  print "Fermat ", n, "\n"
  w = sqrt(n)
  q = w*w
  if (q == n) return(w) 
  if (q < n) w = w+1			# top(sqrt(n)) ungenau wegen endlichem scale
  
  lim = (n + 9) / 6
		 
  if (in_rekpt) {
    lim = min(lim, w+10000)		# w+10000 zu klein für 100895598169 (Mersenne)
    p = prims[maxp]			# größte Primzahl in der Liste
    lim = min(lim, (n/p+p)/2) 		# Reich der Probedivision (a-w <= p)

  } else if (fermat_limit > 0) {
    lim = min(lim, (n/fermat_limit + fermat_limit)/2)
  }
  h = w*w - n 				# erstes b-Quadrat
  d = 2*w+1				# erster Abstand zum nächsten b-Quadrat

  for (a=w; a<=lim; a++) {

    if (quads10080[mod(h,10080)]) {	# kein Quadrat
      w = sqrt(h)
      if ( w*w == h) return(a-w)
      #print h, " ", a-w, "\n"
    }
    h = h+d
    d = d+2

  }

  return 0
}





define nroot(a,n) {	# n-te Wurzel, negativ falls nicht ganzzahlig

  auto len, anf, end, mitte, pot

  if (n < 1 || a < 0) return -1
  if (a == 0) return 0
  if (n == 1) return a

  len = length(a)-1			# Stellenzahl-1
  anf = 10^(len/n)			# 10er-Potenz <= a
  end = 10*anf				# 10er-Potenz > a

  while (anf <= end) {			# Intervallschachtelungen
    mitte = (anf + end) / 2
    pot = mitte^n
    if (pot == a) return mitte		# geht auf
    if (pot < a) {
      anf = mitte + 1
    } else {
      end = mitte - 1
    } 
  }
  return -mitte				# geht nicht auf
}



define ispp (a, lim) {	# echte (Primzahl-) Potenz?

  auto pot, w, i

  a = abs(a)
  if (lim < 2) lim = 2
  if (a <= lim) return 0
  pot = 0
  scale = 1
  lim = l(a) / l(lim)			# natürlicher Logarithmus
  scale = 0
  for (i=2; i<=lim; i++) {
    w = nroot(a, i)
    if (w >= 0) {if ( mr(w) ) return w else pot = -w}	# + Primzahl, - zusammengesetzt
  } 
  return(pot)						# 0, - zusammengesetzt
}






define faktbas (b) {	# Faktorbasis für Pollards p-1 Faktorisierung und ECM

  auto i, p, pot, j

  pollardb = b					# global
  pollardk = 1					# global, Ergebnis

  for( i=1; prims[i]<=b; i++ ) {		# Primzahlpotenzen <= b multiplizieren

    p = prims[i]
    if (p == 0) break
    pot = p

    for( j=1; pot*p<=b; j++) pot = pot * p

    pollardk = pollardk * pot
  }
  faktbasi = i					# global
  return pollardk
}






define pollardp1 (a) {		# Pollards p-1 Faktorisierung

  auto i, bas, d
  print "\nPollard p-1 ", a, "\n"

  a = abs(a)
  if (a < 4) return 0

  pollardb = 10

  for (i=1; i<=10; i++) {	# bei 10 Durchläufen ist pollardb = 10*2^10 = 10240
				# pollardk hat dann 4451 Stellen (grob: Verdopplung je Durchlauf)
				# drüber geht powermod() in die Knie
				# Sei aus=92478562934562956234950246246872068927111:
				# 		 Durchlauf: 10  11   12  13
				# powermod(3,pollardk,aus): 11  40  140   ? Sekunden
				# Rechner Dude, Win XP
    print "|"
    if (!mod(i, 5)) print " "
    bas = random(2, a-2)			# Zufallsbasis
    #print bas, "\n"    
    d = euklid1(bas,a)
    if (d > 1) return d				# Glück! echter Teiler

    pollardb = pollardb * 2
    pollardk = faktbas(pollardb)		# größerer Exponent pollardk
    #print pollardk, " "
    d = powermod(bas, pollardk, a) - 1
    if (d < 0) d = d + a
    #print d, "\n\n"
    d = euklid1( mod( d, a), a)

    if (d > 1 && d < a) return d		# echter Teiler

  }
  return 0					# nichts gefunden
}





define pollardrho (n) {		# Pollards Rho Faktorisierung

  auto lim, x, y, y1, y2, y3, y4, ggt, i, j, k, d

print "\nPollard Rho ", n, "\n"

  n = abs(n)
  if (n < 4) return 0
  if ( mod(n, 2) == 0 ) return 2

  lim = min( iter_pollard, sqrt(sqrt(n))+20000 )
  #lim = sqrt(sqrt(n))+1000

  x = random(0,n-1)				# zufälliger Startwert x
  ggt = 1
  i = 1

  while (ggt == 1) {			# Brents cycle-finding algorithm:
					# If i is a power of 2, let y = xi, and at each step, 
					# compare the current value xi with the saved value y.
    j = i
    y4 = y3					# die fünf letzten y-Werte berücksichtigen
    y3 = y2
    y2 = y1
    y1 = y
    y = x
    #print y, " "
    #print j, " "
    print "|"
    while (i < 2*j) {

      x = mod( x * x + 1, n )			# x durchläuft eine Quasi-Zufallsfolge
      i = i+1
      if (x == y || i > lim) return 0		# neuen Startwert x probieren

      #ggt = euklid1( x-y, n )
      #ggt = euklid1( (x-y)*(x-y1), n )
      #ggt = euklid1( (x-y)*(x-y1)*(x-y2), n )
      ggt = euklid1( (x-y)*(x-y1)*(x-y2)*(x-y3)*(x-y4), n )

      if (ggt > 1) return ggt			# Teiler gefunden
    }
  }
  return 0					# nichts gefunden
}






define rekpt(n, anzn, step) {			# rekursive Suche nach Primteilern

  auto i, j, k, p, ret, l, len, h, in_rekpt, same_ec

  if ( mr(n) ) {				# nach Miller-Rabin ist n Primzahl
    for (i=1; i<=anzn; i++) {
      j = a[0]
      for (l=j; a[l-1]>n; l--) {
        a[l] = a[l-1]
      }
      a[l] = n					# Primteiler in Sammlung a[]
      j = j+1
    }
    a[j] = 0
    a[0] = j
    return 1
  } 

  p = abs( ispp(n, prims[maxp])	)		# echte (Primzahl-) Potenz?

  in_rekpt = 1
  if (p == 0 ) p = fermat( n )
  in_rekpt = 0


  if ( step <= 1 && p == 0 ) p = pollardrho( n )	# Pollard rho

  #if ( p == 0 && iter_ecm  ) p = lehman( n, 1, 10 )	# Lehman (in Datei ECM)

  if ( step <= 2 && p == 0 && iter_ecm ) {		# ECM
    step = 2
    pollardk = faktbas(  500)
    p = ecm( n )
  }
  if ( step <= 2 && p == 0 ) p = pollardrho( n )	# Pollard rho

  #if ( p == 0 ) p = jones( n, 10^6 )			# Jones (in Datei quadRest)
  #if ( p == 0 && iter_ecm  ) p = lehman( n, 11, 100 )	# Lehman

  if ( step <= 3 && p == 0 && iter_ecm ) {		# ECM
    if (step == 2) {
      same_ec = 1
      h = pollardk
      pollardk = faktbas( 2000) / h
    } else {
      pollardk = faktbas( 2000)
    }
    step = 3
    p = ecm( n )
  }
  #if ( p == 0 && iter_ecm ) p = lehman( n, 101, 1000 )	# Lehman

  len = length(n)
  if ( p == 0 && sieb_geladen && len<22 ) p = quadsieb( n )	# quadratisches Sieb

  if ( step <= 4 && p == 0 && iter_ecm ) {		# ECM
    if (step == 3) {
      same_ec = 1
      h = faktbas(2000)
      pollardk = faktbas(10000)
      pollardk = pollardk / h
    } else {
      pollardk = faktbas(10000)
    }
    step = 4
    p = ecm( n )
  }
  same_ec = 0

  if ( p == 0 && sieb_geladen && len>=22 && len<40 ) p = quadsieb( n )	# quadratisches Sieb

  if ( p == 0 ) {			# nichts gefunden
    for (i=1; i<=anzn; i++) {
      k = b[0]
      for (l=k; b[l-1]>n; l--) {
        b[l] = b[l-1]
      }
      b[l] = n				# harte Nuss in Sammlung b[]
      k = k+1
    }
    b[k] = 0
    b[0] = k

    return 0
  }

  anzp = 1
  n = n / p

  while ( mod(n,p) == 0 ) {		# Wie oft kommt p in n vor?
    n = quotient			# quotient ist global
    anzp = anzp + 1
  }

  ret = rekpt( p, anzn * anzp, step)

  if (n == 1) return ret		# n muss nicht mehr zerlegt werden

  return ret * rekpt( n, anzn, step)	# 0 wenn unzerlegter Brocken dabei
}




define primteiler (n) {		# sucht alle Primteiler, gibt sie mehrfach aus

  auto i, j, p			# global: a[], b[]

  if (n == 0) return 0
  n = abs(n)

  j = 1
  for (i=1; i <= 65535; i++) {	# Probedivision

    p = prims[i]
    if (p > n || p == 0) break

    while ( mod(n,p) == 0 ) {
      n = quotient		# quotient ist global
      a[j++] = p		# Primteiler in Sammlung a[]
    }
  }
  
  a[0] = j;  a[j] = 0		# Ende markieren
  b[0] = 1;  b[1] = 0		# b[] sammelt harte Brocken: nicht prim, aber unzerlegt

  if (n >= sqrp) {
  #if (sqrt(n) > prims[maxp]) {
    n = rekpt(n,1,1) 		# rekursiv nach größeren Primteilern suchen
  } else if (n > 1) {
    a[j] = n	 		# Primzahl
    a[++j] = 0
    a[0] = j
    n = 1
  }

  print "\nPrimteiler: "
  p = zeil			# zeil ist global
  zeil = 0
  i = show(a[])			# gefundene Primteiler

  if (b[1] > 0 ) {
    print "unzerlegt: "
    i = show(b[])		# harte Brocken
  }
  zeil = p			# zeil ist global

  return n			# 0 (nicht fertig) oder größer (fertig)
}




define teiler (n) {		# erzeugt die Teiler systematisch aus den Primteilern

  auto pt[], ptn[], i, anz, anzpt, expo[], sum, len

  if (primteiler(n) == 0) {			# nicht alle Primteiler gefunden
    for (anz=1; a[anz]; anz++) {}; anz=anz-1	# gefundene zählen
    for (i=1; b[i]; i++) {a[anz+i]=b[i]} 	# unzerlegte Teiler dazu nehmen
    a[anz+i] = 0				# Ende markieren
  }

  print "Teiler\n"
  ptn[0] = 0					# Array für Exponenten

  i = 1; anzpt = 0; anz = 1			# Exponenten ins Array ptn, Anzahl Teiler berechnen
  while (a[i]) {
    if (a[i] != a[i-1]) {
      anzpt = anzpt + 1				# neuer Primteiler (erstes Vorkommen)
      pt[anzpt] = a[i]				# in pt festhalten
      anz = anz * (ptn[anzpt-1]+1)		# voriger Primteiler fertig: geht jetzt ein in Anzahl der Teiler
    }
    ptn[anzpt] = ptn[anzpt] + 1			# Exponent erhöhen
    i = i + 1
  }
  anz = anz * (ptn[anzpt]+1)
  sum = 0
  len = length(n)

  ptn[anzpt+1] = 1

  while (expo[anzpt+1] == 0) {			# nächsten Teiler berechnen

    teiler = 1
    for (i=1; i<=anzpt; i++) teiler = teiler * pt[i]^expo[i]

    for (i=1; i<=len-length(teiler); i++) print " "	# Leerzeichen vorne auffüllen (DOS kann sortieren)
    print teiler, "\n"
    sum = sum + teiler

    for (i=1; i<=anzpt+1; i++) {		# nächste Kombination der Exponenten (Kilometerzähler eins weiter)

      if (expo[i] < ptn[i]) {expo[i] = expo[i] + 1; break} else expo[i] = 0
    }
  }
  print "Summe: ", sum
  print "\nAnzahl: "
  return anz
}





define phi (n) {		# Euler-Funktion

  auto i, x, y, phi

  n = abs(n)
  if (n < 2) return n
  if (primteiler(n) == 0) return 0

  phi = 1
  y = 0
  i = 1
  while (a[i] != 0) {

    x = a[i]
    if (x != y) phi = phi * (x-1) else phi = phi * x
    y = x
    i = i + 1
  }  
  return phi
}




/* nach dislog.txt verschoben:

define phi_zyk (n) 				# Euler-Funktion bei zyklischem n
define ord_ (n, modul, phi, a[], p) 		# Ordnung von n mod modul intern
define ord (n, modul) 				# Ordnung von n mod modul
define pr (modul, phi, a_phi[], b_phi[]) 	# Primitivwurzel intern
define proot (modul) 				# Primitivwurzel
define pollardlog (bas, a, modul)		# Pollard Rho-Algorithmus beim diskreten Logarithmus

*/






define testpt () {		# multipliziere Primteiler und harte Brocken
  auto i, prod
  prod = 1
  for (i=1; a[i]>0; i++) prod = prod * a[i]
  for (i=1; b[i]>0; i++) prod = prod * b[i]
  return prod
}

define pprod(n) {if(n==0) return 1; return prims[n]*pprod(n-1)}		# Produkt der ersten Primzahlen



define hart(von, bis) {		# suche harte Nuss zufällig im Bereich von..bis
  auto i; 
  while(1) {x=random(von, bis); if(x%2==0) x=x+1; if(primteiler(x)==0) return x; i++}
}



define test(a[], von, bis) {
  auto i
  #for(i=von;i<=bis;i++) if(a[i] != mr(a[i]) ) print i, " "; print "\nTest fertig\n"
  for(i=von;i<=bis;i++) if( nextprime(a[i]+1) != a[i+1] ) return i; print "\nTest fertig\n"
}










/*  auskommentiert, so viel packt BC nicht auf einmal

define text (zahl) {

  auto rest

  rest = mod(zahl, 27)

  if (quotient) quotient = text(quotient)	# rekursiver Abstieg

  # bei Rückkehr schreiben, sonst spiegelverkehrt

  if (rest==0) {print " "; return} 	
  if (rest==1) {print "a"; return}
  if (rest==2) {print "b"; return}
  if (rest==3) {print "c"; return}
  if (rest==4) {print "d"; return}
  if (rest==5) {print "e"; return}
  if (rest==6) {print "f"; return}
  if (rest==7) {print "g"; return}
  if (rest==8) {print "h"; return}
  if (rest==9) {print "i"; return}
  if (rest==10) {print "j"; return}
  if (rest==11) {print "k"; return}
  if (rest==12) {print "l"; return}
  if (rest==13) {print "m"; return}
  if (rest==14) {print "n"; return}
  if (rest==15) {print "o"; return}
  if (rest==16) {print "p"; return}
  if (rest==17) {print "q"; return}
  if (rest==18) {print "r"; return}
  if (rest==19) {print "s"; return}
  if (rest==20) {print "t"; return}
  if (rest==21) {print "u"; return}
  if (rest==22) {print "v"; return}
  if (rest==23) {print "w"; return}
  if (rest==24) {print "x"; return}
  if (rest==25) {print "y"; return}
  if (rest==26) {print "z"; return}

}


define zahl () {

  auto x, y 

  while (1) {

    x = read()

    if (x>27 || x<0) return y

    y = y*27 + x
    print y, " beenden: -1\n"
  }
}
*/