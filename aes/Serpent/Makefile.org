# $Id$
# Makefile for GNU make for the C reference implementation of Serpent
#
# =================================================================
# MODIFIED BY FMS ON 1998-06-30 TO FIT THE BORLAND MAKE AND
# C COMPILER BUT NOT TESTED SINCE I DON'T HAVE EITHER
# =================================================================

# This file is part of the C reference implementation of Serpent.
#
# Written by Frank Stajano,
# Olivetti Oracle Research Laboratory <http://www.orl.co.uk/~fms/> and
# Cambridge University Computer Laboratory <http://www.cl.cam.ac.uk/~fms27/>.
# 
# (c) 1998 Olivetti Oracle Research Laboratory (ORL)
#
# Original (Python) Serpent reference development started on 1998 02 12.
# C implementation development started on 1998 03 04.
#
# Serpent cipher invented by Ross Anderson, Eli Biham, Lars Knudsen.
# Serpent is a candidate for the Advanced Encryption Standard.


CC = bcc32
CFLAGS = -Oi -6 -v -A -a4 -O2
# Their recommendation


# %: %.o serpent-reference.o serpent-aux.o
#       $(CC) -o $@ $(CFLAGS) $^
ecb_vk.exe: ecb_vk.c serpent.c 
        $(CC) $(CFLAGS) ecb_vk.c serpent.c
ecb_vt.exe: ecb_vt.c serpent.c
        $(CC) $(CFLAGS) ecb_vt.c serpent.c
ecb_e_m.exe: ecb_e_m.c serpent.c
        $(CC) $(CFLAGS) ecb_e_m.c serpent.c
ecb_d_m.exe: ecb_d_m.c serpent.c
        $(CC) $(CFLAGS) ecb_d_m.c serpent.c
cbc_e_m.exe: cbc_e_m.c serpent.c
        $(CC) $(CFLAGS) cbc_e_m.c serpent.c
cbc_d_m.exe: cbc_d_m.c serpent.c
        $(CC) $(CFLAGS) cbc_d_m.c serpent.c


#%.txt: %
#       ./$< > $@
# Note that, with the unoptimised reference implementation, the Monte Carlo
# Test outputs take several hours each. Consequently, the default target
# won't make them. If you want them, do "make alltest" when you're ready to
# wait.
ecb_vk.txt: ecb_vk.exe
        ./ecb_vk.exe > ecb_vk.txt
ecb_vt.txt: ecb_vt.exe
        ./ecb_vt.exe > ecb_vt.txt
ecb_e_m.txt: ecb_e_m.exe
        ./ecb_e_m.exe > ecb_e_m.txt
ecb_d_m.txt: ecb_d_m.exe
        ./ecb_d_m.exe > ecb_d_m.txt
cbc_e_m.txt: cbc_e_m.exe
        ./cbc_e_m.exe > cbc_e_m.txt
cbc_d_m.txt: cbc_d_m.exe
        ./cbc_d_m.exe > cbc_d_m.txt

kat: ecb_vk.txt ecb_vt.txt

mct: ecb_e_m.txt ecb_d_m.txt cbc_e_m.txt cbc_d_m.txt

alltest: kat mct


allexe: ecb_vk.exe ecb_vt.exe ecb_e_m.exe ecb_d_m.exe cbc_e_m.exe cbc_d_m.exe


# Dependencies
#
# These are easy ones that can be made by the implicit %.c -> %.o rule, so
# we only list the dependencies and not how to build the target.
# INSTEAD NOW we do, to please Borland.
#serpent-reference.o: serpent-reference.c serpent-reference.h serpent-api.h serpent-tables.h serpent-aux.h
#        $(CC) -o serpent-reference.o $(CFLAGS) -c serpent-reference.c
#serpent-aux.o: serpent-aux.c serpent-aux.h serpent-api.h
#        $(CC) -o serpent-aux.o $(CFLAGS) -c serpent-aux.c
#ecb_vk.o: ecb_vk.c serpent-aux.h serpent-api.h
#        $(CC) -o ecb_vk.o $(CFLAGS) -c ecb_vk.c
#ecb_vt.o: ecb_vt.c serpent-aux.h serpent-api.h
#        $(CC) -o ecb_vt.o $(CFLAGS) -c ecb_vt.c
#ecb_tbl.o: ecb_tbl.c serpent-aux.h serpent-api.h
#        $(CC) -o ecb_tbl.o $(CFLAGS) -c ecb_tbl.c
#ecb_iv.o: ecb_iv.c serpent-aux.h serpent-api.h
#        $(CC) -o ecb_iv.o $(CFLAGS) -c ecb_iv.c
#ecb_e_m.o: ecb_e_m.c serpent-aux.h serpent-api.h
#        $(CC) -o ecb_e_m.o $(CFLAGS) -c ecb_e_m.c
#ecb_d_m.o: ecb_d_m.c serpent-aux.h serpent-api.h
#        $(CC) -o ecb_d_m.o $(CFLAGS) -c ecb_d_m.c
#cbc_e_m.o: cbc_e_m.c serpent-aux.h serpent-api.h
#        $(CC) -o cbc_e_m.o $(CFLAGS) -c cbc_e_m.c
#cbc_d_m.o: cbc_d_m.c serpent-aux.h serpent-api.h
#        $(CC) -o cbc_d_m.o $(CFLAGS) -c cbc_d_m.c

# end of makefile.bor
